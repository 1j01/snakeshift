(function(){const relList=document.createElement("link").relList;if(relList&&relList.supports&&relList.supports("modulepreload"))return;for(const link of document.querySelectorAll('link[rel="modulepreload"]'))processPreload(link);new MutationObserver(mutations=>{for(const mutation of mutations)if(mutation.type==="childList")for(const node of mutation.addedNodes)node.tagName==="LINK"&&node.rel==="modulepreload"&&processPreload(node)}).observe(document,{childList:!0,subtree:!0});function getFetchOpts(link){const fetchOpts={};return link.integrity&&(fetchOpts.integrity=link.integrity),link.referrerPolicy&&(fetchOpts.referrerPolicy=link.referrerPolicy),link.crossOrigin==="use-credentials"?fetchOpts.credentials="include":link.crossOrigin==="anonymous"?fetchOpts.credentials="omit":fetchOpts.credentials="same-origin",fetchOpts}function processPreload(link){if(link.ep)return;link.ep=!0;const fetchOpts=getFetchOpts(link);fetch(link.href,fetchOpts)}})();class SafeStorage{memoryStorage=new Map;setItem(key,value){this.memoryStorage.set(key,String(value));try{return localStorage.setItem(key,value),!0}catch(e){return console.warn("Failed to persist data to localStorage",e),!1}}getItem(key){try{return localStorage.getItem(key)}catch(e){return console.warn("Failed to retrieve data from localStorage",e),this.memoryStorage.get(key)??null}}removeItem(key){this.memoryStorage.delete(key);try{return localStorage.removeItem(key),!0}catch(e){return console.warn("Failed to remove data from localStorage",e),!1}}clear(){this.memoryStorage.clear();try{return localStorage.clear(),!0}catch(e){return console.warn("Failed to clear localStorage",e),!1}}}const safeStorage=new SafeStorage;class Processor{constructor(options){this.selfOptions=options||{},this.pipes={}}options(options){return options&&(this.selfOptions=options),this.selfOptions}pipe(name,pipeArg){let pipe=pipeArg;if(typeof name=="string"){if(typeof pipe>"u")return this.pipes[name];this.pipes[name]=pipe}if(name&&name.name){if(pipe=name,pipe.processor===this)return pipe;this.pipes[pipe.name]=pipe}return pipe.processor=this,pipe}process(input,pipe){let context=input;context.options=this.options();let nextPipe=pipe||input.pipe||"default",lastPipe;for(;nextPipe;)typeof context.nextAfterChildren<"u"&&(context.next=context.nextAfterChildren,context.nextAfterChildren=null),typeof nextPipe=="string"&&(nextPipe=this.pipe(nextPipe)),nextPipe.process(context),lastPipe=nextPipe,nextPipe=null,context&&context.next&&(context=context.next,nextPipe=context.pipe||lastPipe);return context.hasResult?context.result:void 0}}class Pipe{constructor(name){this.name=name,this.filters=[]}process(input){if(!this.processor)throw new Error("add this pipe to a processor before using it");const debug=this.debug,length=this.filters.length,context=input;for(let index=0;index<length;index++){const filter=this.filters[index];if(debug&&this.log(`filter: ${filter.filterName}`),filter(context),typeof context=="object"&&context.exiting){context.exiting=!1;break}}!context.next&&this.resultCheck&&this.resultCheck(context)}log(msg){console.log(`[jsondiffpatch] ${this.name} pipe, ${msg}`)}append(...args){return this.filters.push(...args),this}prepend(...args){return this.filters.unshift(...args),this}indexOf(filterName){if(!filterName)throw new Error("a filter name is required");for(let index=0;index<this.filters.length;index++)if(this.filters[index].filterName===filterName)return index;throw new Error(`filter not found: ${filterName}`)}list(){return this.filters.map(f=>f.filterName)}after(filterName,...params){const index=this.indexOf(filterName);return this.filters.splice(index+1,0,...params),this}before(filterName,...params){const index=this.indexOf(filterName);return this.filters.splice(index,0,...params),this}replace(filterName,...params){const index=this.indexOf(filterName);return this.filters.splice(index,1,...params),this}remove(filterName){const index=this.indexOf(filterName);return this.filters.splice(index,1),this}clear(){return this.filters.length=0,this}shouldHaveResult(should){if(should===!1){this.resultCheck=null;return}if(!this.resultCheck)return this.resultCheck=context=>{if(!context.hasResult){console.log(context);const error=new Error(`${this.name} failed`);throw error.noResult=!0,error}},this}}class Context{setResult(result){return this.result=result,this.hasResult=!0,this}exit(){return this.exiting=!0,this}push(child,name){return child.parent=this,typeof name<"u"&&(child.childName=name),child.root=this.root||this,child.options=child.options||this.options,this.children?(this.children[this.children.length-1].next=child,this.children.push(child)):(this.children=[child],this.nextAfterChildren=this.next||null,this.next=child),child.next=this,this}}function cloneRegExp(re){const regexMatch=/^\/(.*)\/([gimyu]*)$/.exec(re.toString());return new RegExp(regexMatch[1],regexMatch[2])}function clone(arg){if(typeof arg!="object")return arg;if(arg===null)return null;if(Array.isArray(arg))return arg.map(clone);if(arg instanceof Date)return new Date(arg.getTime());if(arg instanceof RegExp)return cloneRegExp(arg);const cloned={};for(const name in arg)Object.prototype.hasOwnProperty.call(arg,name)&&(cloned[name]=clone(arg[name]));return cloned}class DiffContext extends Context{constructor(left,right){super(),this.left=left,this.right=right,this.pipe="diff"}setResult(result){if(this.options.cloneDiffValues&&typeof result=="object"){const clone$1=typeof this.options.cloneDiffValues=="function"?this.options.cloneDiffValues:clone;typeof result[0]=="object"&&(result[0]=clone$1(result[0])),typeof result[1]=="object"&&(result[1]=clone$1(result[1]))}return super.setResult(result)}}class PatchContext extends Context{constructor(left,delta){super(),this.left=left,this.delta=delta,this.pipe="patch"}}class ReverseContext extends Context{constructor(delta){super(),this.delta=delta,this.pipe="reverse"}}const diffFilter$3=function(context){if(context.left===context.right){context.setResult(void 0).exit();return}if(typeof context.left>"u"){if(typeof context.right=="function")throw new Error("functions are not supported");context.setResult([context.right]).exit();return}if(typeof context.right>"u"){context.setResult([context.left,0,0]).exit();return}if(typeof context.left=="function"||typeof context.right=="function")throw new Error("functions are not supported");if(context.leftType=context.left===null?"null":typeof context.left,context.rightType=context.right===null?"null":typeof context.right,context.leftType!==context.rightType){context.setResult([context.left,context.right]).exit();return}if(context.leftType==="boolean"||context.leftType==="number"){context.setResult([context.left,context.right]).exit();return}if(context.leftType==="object"&&(context.leftIsArray=Array.isArray(context.left)),context.rightType==="object"&&(context.rightIsArray=Array.isArray(context.right)),context.leftIsArray!==context.rightIsArray){context.setResult([context.left,context.right]).exit();return}context.left instanceof RegExp&&(context.right instanceof RegExp?context.setResult([context.left.toString(),context.right.toString()]).exit():context.setResult([context.left,context.right]).exit())};diffFilter$3.filterName="trivial";const patchFilter$3=function(context){if(typeof context.delta>"u"){context.setResult(context.left).exit();return}if(context.nested=!Array.isArray(context.delta),context.nested)return;const nonNestedDelta=context.delta;if(nonNestedDelta.length===1){context.setResult(nonNestedDelta[0]).exit();return}if(nonNestedDelta.length===2){if(context.left instanceof RegExp){const regexArgs=/^\/(.*)\/([gimyu]+)$/.exec(nonNestedDelta[1]);if(regexArgs){context.setResult(new RegExp(regexArgs[1],regexArgs[2])).exit();return}}context.setResult(nonNestedDelta[1]).exit();return}nonNestedDelta.length===3&&nonNestedDelta[2]===0&&context.setResult(void 0).exit()};patchFilter$3.filterName="trivial";const reverseFilter$3=function(context){if(typeof context.delta>"u"){context.setResult(context.delta).exit();return}if(context.nested=!Array.isArray(context.delta),context.nested)return;const nonNestedDelta=context.delta;if(nonNestedDelta.length===1){context.setResult([nonNestedDelta[0],0,0]).exit();return}if(nonNestedDelta.length===2){context.setResult([nonNestedDelta[1],nonNestedDelta[0]]).exit();return}nonNestedDelta.length===3&&nonNestedDelta[2]===0&&context.setResult([nonNestedDelta[0]]).exit()};reverseFilter$3.filterName="trivial";const collectChildrenDiffFilter=context=>{if(!context||!context.children)return;const length=context.children.length;let child,result=context.result;for(let index=0;index<length;index++)child=context.children[index],!(typeof child.result>"u")&&(result=result||{},result[child.childName]=child.result);result&&context.leftIsArray&&(result._t="a"),context.setResult(result).exit()};collectChildrenDiffFilter.filterName="collectChildren";const objectsDiffFilter=context=>{if(context.leftIsArray||context.leftType!=="object")return;const left=context.left,right=context.right;let name,child;const propertyFilter=context.options.propertyFilter;for(name in left)Object.prototype.hasOwnProperty.call(left,name)&&(propertyFilter&&!propertyFilter(name,context)||(child=new DiffContext(left[name],right[name]),context.push(child,name)));for(name in right)Object.prototype.hasOwnProperty.call(right,name)&&(propertyFilter&&!propertyFilter(name,context)||typeof left[name]>"u"&&(child=new DiffContext(void 0,right[name]),context.push(child,name)));if(!context.children||context.children.length===0){context.setResult(void 0).exit();return}context.exit()};objectsDiffFilter.filterName="objects";const patchFilter$2=function(context){if(!context.nested)return;const nestedDelta=context.delta;if(nestedDelta._t)return;const objectDelta=nestedDelta;let name,child;for(name in objectDelta)child=new PatchContext(context.left[name],objectDelta[name]),context.push(child,name);context.exit()};patchFilter$2.filterName="objects";const collectChildrenPatchFilter$1=function(context){if(!context||!context.children||context.delta._t)return;const object=context.left,length=context.children.length;let child;for(let index=0;index<length;index++){child=context.children[index];const property=child.childName;Object.prototype.hasOwnProperty.call(context.left,property)&&child.result===void 0?delete object[property]:object[property]!==child.result&&(object[property]=child.result)}context.setResult(object).exit()};collectChildrenPatchFilter$1.filterName="collectChildren";const reverseFilter$2=function(context){if(!context.nested||context.delta._t)return;const objectDelta=context.delta;let name,child;for(name in objectDelta)child=new ReverseContext(objectDelta[name]),context.push(child,name);context.exit()};reverseFilter$2.filterName="objects";const collectChildrenReverseFilter$1=context=>{if(!context||!context.children||context.delta._t)return;const length=context.children.length;let child;const delta={};for(let index=0;index<length;index++){child=context.children[index];const property=child.childName;delta[property]!==child.result&&(delta[property]=child.result)}context.setResult(delta).exit()};collectChildrenReverseFilter$1.filterName="collectChildren";const defaultMatch=function(array1,array2,index1,index2){return array1[index1]===array2[index2]},lengthMatrix=function(array1,array2,match,context){const len1=array1.length,len2=array2.length;let x,y;const matrix=new Array(len1+1);for(x=0;x<len1+1;x++)for(matrix[x]=new Array(len2+1),y=0;y<len2+1;y++)matrix[x][y]=0;for(matrix.match=match,x=1;x<len1+1;x++)for(y=1;y<len2+1;y++)match(array1,array2,x-1,y-1,context)?matrix[x][y]=matrix[x-1][y-1]+1:matrix[x][y]=Math.max(matrix[x-1][y],matrix[x][y-1]);return matrix},backtrack=function(matrix,array1,array2,context){let index1=array1.length,index2=array2.length;const subsequence={sequence:[],indices1:[],indices2:[]};for(;index1!==0&&index2!==0;)if(matrix.match(array1,array2,index1-1,index2-1,context))subsequence.sequence.unshift(array1[index1-1]),subsequence.indices1.unshift(index1-1),subsequence.indices2.unshift(index2-1),--index1,--index2;else{const valueAtMatrixAbove=matrix[index1][index2-1],valueAtMatrixLeft=matrix[index1-1][index2];valueAtMatrixAbove>valueAtMatrixLeft?--index2:--index1}return subsequence},get=function(array1,array2,match,context){const innerContext=context||{},matrix=lengthMatrix(array1,array2,match||defaultMatch,innerContext);return backtrack(matrix,array1,array2,innerContext)},lcs={get},ARRAY_MOVE=3;function arraysHaveMatchByRef(array1,array2,len1,len2){for(let index1=0;index1<len1;index1++){const val1=array1[index1];for(let index2=0;index2<len2;index2++){const val2=array2[index2];if(index1!==index2&&val1===val2)return!0}}}function matchItems(array1,array2,index1,index2,context){const value1=array1[index1],value2=array2[index2];if(value1===value2)return!0;if(typeof value1!="object"||typeof value2!="object")return!1;const objectHash=context.objectHash;if(!objectHash)return context.matchByPosition&&index1===index2;context.hashCache1=context.hashCache1||[];let hash1=context.hashCache1[index1];if(typeof hash1>"u"&&(context.hashCache1[index1]=hash1=objectHash(value1,index1)),typeof hash1>"u")return!1;context.hashCache2=context.hashCache2||[];let hash2=context.hashCache2[index2];return typeof hash2>"u"&&(context.hashCache2[index2]=hash2=objectHash(value2,index2)),typeof hash2>"u"?!1:hash1===hash2}const diffFilter$2=function(context){if(!context.leftIsArray)return;const matchContext={objectHash:context.options&&context.options.objectHash,matchByPosition:context.options&&context.options.matchByPosition};let commonHead=0,commonTail=0,index,index1,index2;const array1=context.left,array2=context.right,len1=array1.length,len2=array2.length;let child;for(len1>0&&len2>0&&!matchContext.objectHash&&typeof matchContext.matchByPosition!="boolean"&&(matchContext.matchByPosition=!arraysHaveMatchByRef(array1,array2,len1,len2));commonHead<len1&&commonHead<len2&&matchItems(array1,array2,commonHead,commonHead,matchContext);)index=commonHead,child=new DiffContext(array1[index],array2[index]),context.push(child,index),commonHead++;for(;commonTail+commonHead<len1&&commonTail+commonHead<len2&&matchItems(array1,array2,len1-1-commonTail,len2-1-commonTail,matchContext);)index1=len1-1-commonTail,index2=len2-1-commonTail,child=new DiffContext(array1[index1],array2[index2]),context.push(child,index2),commonTail++;let result;if(commonHead+commonTail===len1){if(len1===len2){context.setResult(void 0).exit();return}for(result=result||{_t:"a"},index=commonHead;index<len2-commonTail;index++)result[index]=[array2[index]];context.setResult(result).exit();return}if(commonHead+commonTail===len2){for(result=result||{_t:"a"},index=commonHead;index<len1-commonTail;index++)result[`_${index}`]=[array1[index],0,0];context.setResult(result).exit();return}delete matchContext.hashCache1,delete matchContext.hashCache2;const trimmed1=array1.slice(commonHead,len1-commonTail),trimmed2=array2.slice(commonHead,len2-commonTail),seq=lcs.get(trimmed1,trimmed2,matchItems,matchContext),removedItems=[];for(result=result||{_t:"a"},index=commonHead;index<len1-commonTail;index++)seq.indices1.indexOf(index-commonHead)<0&&(result[`_${index}`]=[array1[index],0,0],removedItems.push(index));let detectMove=!0;context.options&&context.options.arrays&&context.options.arrays.detectMove===!1&&(detectMove=!1);let includeValueOnMove=!1;context.options&&context.options.arrays&&context.options.arrays.includeValueOnMove&&(includeValueOnMove=!0);const removedItemsLength=removedItems.length;for(index=commonHead;index<len2-commonTail;index++){const indexOnArray2=seq.indices2.indexOf(index-commonHead);if(indexOnArray2<0){let isMove=!1;if(detectMove&&removedItemsLength>0){for(let removeItemIndex1=0;removeItemIndex1<removedItemsLength;removeItemIndex1++)if(index1=removedItems[removeItemIndex1],matchItems(trimmed1,trimmed2,index1-commonHead,index-commonHead,matchContext)){result[`_${index1}`].splice(1,2,index,ARRAY_MOVE),includeValueOnMove||(result[`_${index1}`][0]=""),index2=index,child=new DiffContext(array1[index1],array2[index2]),context.push(child,index2),removedItems.splice(removeItemIndex1,1),isMove=!0;break}}isMove||(result[index]=[array2[index]])}else index1=seq.indices1[indexOnArray2]+commonHead,index2=seq.indices2[indexOnArray2]+commonHead,child=new DiffContext(array1[index1],array2[index2]),context.push(child,index2)}context.setResult(result).exit()};diffFilter$2.filterName="arrays";const compare={numerically(a,b){return a-b},numericallyBy(name){return(a,b)=>a[name]-b[name]}},patchFilter$1=function(context){if(!context.nested)return;const nestedDelta=context.delta;if(nestedDelta._t!=="a")return;let index,index1;const delta=nestedDelta,array=context.left;let toRemove=[],toInsert=[];const toModify=[];for(index in delta)if(index!=="_t")if(index[0]==="_"){const removedOrMovedIndex=index;if(delta[removedOrMovedIndex][2]===0||delta[removedOrMovedIndex][2]===ARRAY_MOVE)toRemove.push(parseInt(index.slice(1),10));else throw new Error(`only removal or move can be applied at original array indices, invalid diff type: ${delta[removedOrMovedIndex][2]}`)}else{const numberIndex=index;delta[numberIndex].length===1?toInsert.push({index:parseInt(numberIndex,10),value:delta[numberIndex][0]}):toModify.push({index:parseInt(numberIndex,10),delta:delta[numberIndex]})}for(toRemove=toRemove.sort(compare.numerically),index=toRemove.length-1;index>=0;index--){index1=toRemove[index];const indexDiff=delta[`_${index1}`],removedValue=array.splice(index1,1)[0];indexDiff[2]===ARRAY_MOVE&&toInsert.push({index:indexDiff[1],value:removedValue})}toInsert=toInsert.sort(compare.numericallyBy("index"));const toInsertLength=toInsert.length;for(index=0;index<toInsertLength;index++){const insertion=toInsert[index];array.splice(insertion.index,0,insertion.value)}const toModifyLength=toModify.length;let child;if(toModifyLength>0)for(index=0;index<toModifyLength;index++){const modification=toModify[index];child=new PatchContext(array[modification.index],modification.delta),context.push(child,modification.index)}if(!context.children){context.setResult(array).exit();return}context.exit()};patchFilter$1.filterName="arrays";const collectChildrenPatchFilter2=function(context){if(!context||!context.children||context.delta._t!=="a")return;const array=context.left,length=context.children.length;let child;for(let index=0;index<length;index++){child=context.children[index];const arrayIndex=child.childName;array[arrayIndex]=child.result}context.setResult(array).exit()};collectChildrenPatchFilter2.filterName="arraysCollectChildren";const reverseFilter$1=function(context){if(!context.nested){const nonNestedDelta=context.delta;if(nonNestedDelta[2]===ARRAY_MOVE){const arrayMoveDelta=nonNestedDelta;context.newName=`_${arrayMoveDelta[1]}`,context.setResult([arrayMoveDelta[0],parseInt(context.childName.substring(1),10),ARRAY_MOVE]).exit()}return}const nestedDelta=context.delta;if(nestedDelta._t!=="a")return;const arrayDelta=nestedDelta;let name,child;for(name in arrayDelta)name!=="_t"&&(child=new ReverseContext(arrayDelta[name]),context.push(child,name));context.exit()};reverseFilter$1.filterName="arrays";const reverseArrayDeltaIndex=(delta,index,itemDelta)=>{if(typeof index=="string"&&index[0]==="_")return parseInt(index.substring(1),10);if(Array.isArray(itemDelta)&&itemDelta[2]===0)return`_${index}`;let reverseIndex=+index;for(const deltaIndex in delta){const deltaItem=delta[deltaIndex];if(Array.isArray(deltaItem))if(deltaItem[2]===ARRAY_MOVE){const moveFromIndex=parseInt(deltaIndex.substring(1),10),moveToIndex=deltaItem[1];if(moveToIndex===+index)return moveFromIndex;moveFromIndex<=reverseIndex&&moveToIndex>reverseIndex?reverseIndex++:moveFromIndex>=reverseIndex&&moveToIndex<reverseIndex&&reverseIndex--}else deltaItem[2]===0?parseInt(deltaIndex.substring(1),10)<=reverseIndex&&reverseIndex++:deltaItem.length===1&&parseInt(deltaIndex,10)<=reverseIndex&&reverseIndex--}return reverseIndex},collectChildrenReverseFilter=context=>{if(!context||!context.children)return;const deltaWithChildren=context.delta;if(deltaWithChildren._t!=="a")return;const arrayDelta=deltaWithChildren,length=context.children.length;let child;const delta={_t:"a"};for(let index=0;index<length;index++){child=context.children[index];let name=child.newName;typeof name>"u"&&(name=reverseArrayDeltaIndex(arrayDelta,child.childName,child.result)),delta[name]!==child.result&&(delta[name]=child.result)}context.setResult(delta).exit()};collectChildrenReverseFilter.filterName="arraysCollectChildren";const diffFilter$1=function(context){context.left instanceof Date?(context.right instanceof Date?context.left.getTime()!==context.right.getTime()?context.setResult([context.left,context.right]):context.setResult(void 0):context.setResult([context.left,context.right]),context.exit()):context.right instanceof Date&&context.setResult([context.left,context.right]).exit()};diffFilter$1.filterName="dates";const TEXT_DIFF=2,DEFAULT_MIN_LENGTH=60;let cachedDiffPatch=null;function getDiffMatchPatch(options,required){var _a;if(!cachedDiffPatch){let instance;if(!((_a=options?.textDiff)===null||_a===void 0)&&_a.diffMatchPatch)instance=new options.textDiff.diffMatchPatch;else{if(!required)return null;const error=new Error("The diff-match-patch library was not provided. Pass the library in through the options or use the `jsondiffpatch/with-text-diffs` entry-point.");throw error.diff_match_patch_not_found=!0,error}cachedDiffPatch={diff:function(txt1,txt2){return instance.patch_toText(instance.patch_make(txt1,txt2))},patch:function(txt1,patch2){const results=instance.patch_apply(instance.patch_fromText(patch2),txt1);for(let i=0;i<results[1].length;i++)if(!results[1][i]){const error=new Error("text patch failed");error.textPatchFailed=!0}return results[0]}}}return cachedDiffPatch}const diffFilter=function(context){if(context.leftType!=="string")return;const left=context.left,right=context.right,minLength=context.options&&context.options.textDiff&&context.options.textDiff.minLength||DEFAULT_MIN_LENGTH;if(left.length<minLength||right.length<minLength){context.setResult([left,right]).exit();return}const diffMatchPatch=getDiffMatchPatch(context.options);if(!diffMatchPatch){context.setResult([left,right]).exit();return}const diff=diffMatchPatch.diff;context.setResult([diff(left,right),0,TEXT_DIFF]).exit()};diffFilter.filterName="texts";const patchFilter=function(context){if(context.nested)return;const nonNestedDelta=context.delta;if(nonNestedDelta[2]!==TEXT_DIFF)return;const textDiffDelta=nonNestedDelta,patch2=getDiffMatchPatch(context.options,!0).patch;context.setResult(patch2(context.left,textDiffDelta[0])).exit()};patchFilter.filterName="texts";const textDeltaReverse=function(delta){let i,l,line,lineTmp,header=null;const headerRegex=/^@@ +-(\d+),(\d+) +\+(\d+),(\d+) +@@$/;let lineHeader;const lines=delta.split(`
`);for(i=0,l=lines.length;i<l;i++){line=lines[i];const lineStart=line.slice(0,1);lineStart==="@"?(header=headerRegex.exec(line),lineHeader=i,lines[lineHeader]="@@ -"+header[3]+","+header[4]+" +"+header[1]+","+header[2]+" @@"):lineStart==="+"?(lines[i]="-"+lines[i].slice(1),lines[i-1].slice(0,1)==="+"&&(lineTmp=lines[i],lines[i]=lines[i-1],lines[i-1]=lineTmp)):lineStart==="-"&&(lines[i]="+"+lines[i].slice(1))}return lines.join(`
`)},reverseFilter=function(context){if(context.nested)return;const nonNestedDelta=context.delta;if(nonNestedDelta[2]!==TEXT_DIFF)return;const textDiffDelta=nonNestedDelta;context.setResult([textDeltaReverse(textDiffDelta[0]),0,TEXT_DIFF]).exit()};reverseFilter.filterName="texts";class DiffPatcher{constructor(options){this.processor=new Processor(options),this.processor.pipe(new Pipe("diff").append(collectChildrenDiffFilter,diffFilter$3,diffFilter$1,diffFilter,objectsDiffFilter,diffFilter$2).shouldHaveResult()),this.processor.pipe(new Pipe("patch").append(collectChildrenPatchFilter$1,collectChildrenPatchFilter2,patchFilter$3,patchFilter,patchFilter$2,patchFilter$1).shouldHaveResult()),this.processor.pipe(new Pipe("reverse").append(collectChildrenReverseFilter$1,collectChildrenReverseFilter,reverseFilter$3,reverseFilter,reverseFilter$2,reverseFilter$1).shouldHaveResult())}options(options){return this.processor.options(options)}diff(left,right){return this.processor.process(new DiffContext(left,right))}patch(left,delta){return this.processor.process(new PatchContext(left,delta))}reverse(delta){return this.processor.process(new ReverseContext(delta))}unpatch(right,delta){return this.patch(right,this.reverse(delta))}clone(value){return clone(value)}}function create(options){return new DiffPatcher(options)}let defaultInstance;function patch(left,delta){return defaultInstance||(defaultInstance=new DiffPatcher),defaultInstance.patch(left,delta)}const LEVEL_FORMAT_VERSION=5,PLAYTHROUGH_FORMAT_VERSION=2,LOCAL_STORAGE_FORMAT_VERSION=2;function isPlaythrough(fileContent){const testString=fileContent.slice(0,1e3);return!!(testString.match(/^\s*\[.*snakeshift/s)||testString.match(/^\s*\{.*"snakeshift-playthrough"/s))}function parsePlaythrough(json){let parsed=JSON.parse(json);if(Array.isArray(parsed)){const stateStrings=parsed,baseState=JSON.parse(stateStrings[0]),deltas=[];let prevState=baseState;const diffPatcher=create({objectHash:(obj,index)=>"id"in obj?obj.id:"$$index:"+index});for(let i=1;i<stateStrings.length;i++){const state2=JSON.parse(stateStrings[i]),delta=diffPatcher.diff(prevState,state2);deltas.push(delta),prevState=state2}parsed={format:"snakeshift-playthrough",formatVersion:2,baseState,deltas}}if(!("format"in parsed))throw new Error('Invalid format. Missing "format" property.');if(!("formatVersion"in parsed))throw new Error('Invalid format. Missing "formatVersion" property.');if(parsed.format!=="snakeshift-playthrough")throw new Error(`Invalid format. Expected "snakeshift-playthrough", got ${JSON.stringify(parsed.format)}`);if(typeof parsed.formatVersion!="number")throw new Error(`Invalid format. Expected "number", got ${JSON.stringify(parsed.formatVersion)} for "formatVersion" property.`);if(parsed.formatVersion>PLAYTHROUGH_FORMAT_VERSION)throw new Error("Format version is too new");if(parsed.formatVersion!==PLAYTHROUGH_FORMAT_VERSION)throw new Error("Invalid format version");if(!("baseState"in parsed))throw new Error('Invalid format. Missing "baseState" property.');if(!("deltas"in parsed))throw new Error('Invalid format. Missing "deltas" property.');let state=parsed.baseState;const playthrough=[JSON.stringify(state)];for(const delta of parsed.deltas)if(delta){const newState=patch(state,delta);playthrough.push(JSON.stringify(newState)),state=newState}else playthrough.push(JSON.stringify(state));return playthrough}function isEntityOfType(entity,type){return entity._type===type}function getMovesFromPlaythrough(playthroughJSON){const moves=[],playthrough=parsePlaythrough(playthroughJSON).map(stateString=>{const parsed=JSON.parse(stateString),entities2=[];for(let i=0;i<parsed.entities.length;i++){const entityData=parsed.entities[i],entityType=parsed.entityTypes[i];entities2.push({...entityData,_type:entityType})}return{entities:entities2,activeSnakeId:parsed.entities[parsed.activePlayerEntityIndex]?.id}}).filter(({activeSnakeId:activeSnakeId2})=>activeSnakeId2);let prevState=null,activeSnakeId=null;for(const state of playthrough){if(prevState){if(state.activeSnakeId&&activeSnakeId!==state.activeSnakeId){const activeSnake=state.entities.find(snake=>isEntityOfType(snake,"Snake")&&snake.id===state.activeSnakeId);if(!activeSnake)throw new Error(`Could not find snake with ID ${state.activeSnakeId}`);const head=activeSnake.segments[0];moves.push({click:head})}for(const entity of state.entities)for(const prevStateEntity of prevState.entities)if(isEntityOfType(entity,"Snake")&&isEntityOfType(prevStateEntity,"Snake")&&prevStateEntity.id===entity.id){let moveKey=null;if(prevStateEntity.segments[0].x<entity.segments[0].x?moveKey="ArrowRight":prevStateEntity.segments[0].x>entity.segments[0].x?moveKey="ArrowLeft":prevStateEntity.segments[0].y<entity.segments[0].y?moveKey="ArrowDown":prevStateEntity.segments[0].y>entity.segments[0].y&&(moveKey="ArrowUp"),moveKey){moves.push(moveKey);break}}}prevState=state,activeSnakeId=state.activeSnakeId}const lastState=playthrough[playthrough.length-1],foods=lastState.entities.filter(entity=>isEntityOfType(entity,"Food"));if(foods.length===1){const food=foods[0],activeSnake=lastState.entities.find(snake=>isEntityOfType(snake,"Snake")&&snake.id===lastState.activeSnakeId);if(!activeSnake)throw new Error(`Could not find snake with ID ${lastState.activeSnakeId}`);if(!isEntityOfType(food,"Food"))throw new Error("Could not find Food in last state");const head=activeSnake.segments[0];head.x<food.x?moves.push("ArrowRight"):head.x>food.x?moves.push("ArrowLeft"):head.y<food.y?moves.push("ArrowDown"):head.y>food.y&&moves.push("ArrowUp")}return moves}const storageKeys={muteSoundEffects:"snakeshift:muteSoundEffects",volume:"snakeshift:volume",hapticsEnabled:"snakeshift:hapticsEnabled",hapticsValidDuration:"snakeshift:hapticsValidDuration",hapticsInvalidDuration:"snakeshift:hapticsInvalidDuration",gamepadRepeatRate:"snakeshift:gamepadRepeatRate",gamepadRepeatDelay:"snakeshift:gamepadRepeatDelay",pointerMoveThreshold:"snakeshift:pointerMoveThreshold",bestSolution:levelId=>`snakeshift:bestSolution:${levelId}`,bestMoveCount:levelId=>`snakeshift:bestMoveCount:${levelId}`,localStorageFormatVersion:"snakeshift:localStorageFormatVersion"},playedSounds=[];window.AudioContext??=window.webkitAudioContext;const audioCtx=new AudioContext,mainGain=audioCtx.createGain();mainGain.connect(audioCtx.destination);const loadProgress=document.getElementById("load-progress"),muteButton=document.getElementById("mute-button"),muteButtonText=document.getElementById("mute-button-text");let muted=safeStorage.getItem(storageKeys.muteSoundEffects)==="true",volume=parseFloat(safeStorage.getItem(storageKeys.volume));(!isFinite(volume)||volume<0||volume>1)&&(volume=.5);mainGain.gain.value=volume;const resources={},resourcePaths={undo:"audio/sound-effects/undo.wav",redo:"audio/sound-effects/redo.wav",gong:"audio/sound-effects/gong-2-232435.mp3",gongBrilliant:"audio/sound-effects/486629__jenszygar__gong-brilliant-paiste-32.mp3",eat:"audio/sound-effects/glockenspiel_a-102771.mp3",move:"audio/sound-effects/tiny-drip.wav",switchSnakes:"audio/sound-effects/snake-hissing-6092.mp3",pushCrate:"audio/sound-effects/509532__mindlesstrails__bookcasedrag__sample.mp3",resize:"audio/sound-effects/736438__riley_garinger__woodfric-scraping-dragging-wooden-4x4-post-on-concrete-02__sample.mp3"},totalResources=Object.keys(resourcePaths).length;let loadedResources=0;const numProgressBricks=14,progressBricks=[],loadResources=async resourcePathsByID=>{const entries=Object.entries(resourcePathsByID);let silenceErrors=!1;return Object.fromEntries(await Promise.all(entries.map(async([id,path])=>{let resource;try{resource=await loadResource(path)}catch(error){silenceErrors||(location.protocol==="file:"?(showErrorMessage(`This page must be served by a web server,
in order to load files needed for the game.`,error),silenceErrors=!0):showErrorMessage(`Failed to load resource '${path}'`,error))}if(loadedResources+=1,loadedResources/totalResources*numProgressBricks>progressBricks.length){const progressBrick=document.createElement("div");progressBrick.classList.add("load-progress-brick"),progressBricks.push(progressBrick),loadProgress.appendChild(progressBrick)}return[id,resource]})))};function enableAudioViaUserGesture(){muted||audioCtx.resume()}function toggleMute({savePreference=!0}={}){muted=!muted,updateMuteButton(),savePreference&&safeStorage.setItem(storageKeys.muteSoundEffects,String(muted)),muted?audioCtx.suspend():audioCtx.resume()}const updateMuteButton=()=>{muteButton.ariaPressed=muted?"true":"false",muteButtonText.textContent=muted?"Unmute":"Mute",muteButton.querySelector(".when-muted").hidden=!muted,muteButton.querySelector(".when-unmuted").hidden=muted},loadSound=async path=>{const response=await fetch(path);if(response.ok)return await audioCtx.decodeAudioData(await response.arrayBuffer());throw new Error(`got HTTP ${response.status} fetching '${path}'`)},loadResource=loadSound,showErrorMessage=(message,error)=>{alert(`${message}

${error}`)};function playSound(soundName,{playbackRate=1,volume:volume2=1,cutOffEndFraction=0}={}){try{if(muted)return;playedSounds.push(soundName);const audioBuffer=resources[soundName];if(!audioBuffer)throw new Error(`No AudioBuffer loaded for sound '${soundName}'`);if(audioCtx.state!=="running"){console.warn("Audio context not running, can't play sound");return}const gain=audioCtx.createGain(),source=audioCtx.createBufferSource();source.buffer=audioBuffer,source.connect(gain),gain.connect(mainGain),gain.gain.value=volume2,source.playbackRate.value=playbackRate,cutOffEndFraction&&gain.gain.linearRampToValueAtTime(0,audioCtx.currentTime+audioBuffer.duration*(1-cutOffEndFraction)),source.start(0)}catch(error){console.error(`Failed to play sound '${soundName}':`,error)}}const midiToFreq=midiNote=>440*Math.pow(2,(midiNote-69)/12),songABC="CDEGACFAGCEGFECAGCDFECGEDBGDCGEGCDEGAFCAEDCAFECAGACEGECGAGDBEGCEGCEGCGGECGC",melodyMidi=[...songABC.replace(/^([A-Z]:|%).*$/gim,"").matchAll(/([A-G])([,'])*/gi)].map(match=>{const letter=match[1],octaveModifier=match[2]==="'"?1:match[2]===","?-1:0;return 12*((letter===letter.toUpperCase()?1:0)+octaveModifier+4)+"CDEFGAB".indexOf(letter.toUpperCase())}),melodyFrequencies=melodyMidi.map(midiToFreq);function playMelodicSound(soundName,noteIndex){const playbackRate=melodyFrequencies[noteIndex%melodyFrequencies.length]/440;playSound(soundName,{playbackRate})}muteButton.addEventListener("click",()=>{toggleMute()});updateMuteButton();class Entity{fromJSON(json){Object.assign(this,json)}solid=!0}var ControlScheme=(ControlScheme2=>(ControlScheme2.KeyboardAbsoluteDirection="KeyboardAbsoluteDirection",ControlScheme2.KeyboardFacingRelative="KeyboardFacingRelative",ControlScheme2.Gamepad="Gamepad",ControlScheme2.Pointer="Pointer",ControlScheme2))(ControlScheme||{}),CollisionLayer=(CollisionLayer2=>(CollisionLayer2[CollisionLayer2.None=0]="None",CollisionLayer2[CollisionLayer2.White=1]="White",CollisionLayer2[CollisionLayer2.Black=2]="Black",CollisionLayer2[CollisionLayer2.Both=3]="Both",CollisionLayer2))(CollisionLayer||{});const DIRECTIONS=[{x:1,y:0},{x:0,y:1},{x:-1,y:0},{x:0,y:-1}],grassTexture=document.createElement("img"),grassTextureLoaded=new Promise(resolve=>grassTexture.onload=resolve);grassTexture.src="graphics/shrubbery-24.svg";grassTexture.width=128;grassTexture.height=128;await grassTextureLoaded;let grassPattern=null;class RectangularEntity extends Entity{constructor(x=0,y=0,width=1,height=1,layer=CollisionLayer.White){super(),this.x=x,this.y=y,this.width=width,this.height=height,this.layer=layer}at(x,y){return x>=this.x&&x<this.x+this.width&&y>=this.y&&y<this.y+this.height?{entity:this,layer:this.layer}:null}draw(ctx2){const pixel=1/ctx2.getTransform().a;if(this.layer===CollisionLayer.Both)for(let i=0;i<4;i++)for(let j=0;j<4;j++)ctx2.fillStyle=(i+j)%2===0?"#fff":"#000",ctx2.fillRect(this.x+i*this.width/4,this.y+j*this.height/4,this.width/4+pixel,this.height/4+pixel);else if(this.layer===CollisionLayer.None){if(!grassPattern){grassPattern=ctx2.createPattern(grassTexture,"repeat");const grassTextureCanvas=document.createElement("canvas");grassTextureCanvas.width=grassTexture.width,grassTextureCanvas.height=grassTexture.height,grassTextureCanvas.getContext("2d").drawImage(grassTexture,0,0,grassTexture.width,grassTexture.height),grassPattern=ctx2.createPattern(grassTextureCanvas,"repeat")}grassPattern&&(grassPattern.setTransform(new DOMMatrix().scale(1/grassTexture.width,1/grassTexture.height)),ctx2.fillStyle=grassPattern,ctx2.fillRect(this.x,this.y,this.width+pixel,this.height+pixel))}else ctx2.fillStyle=this.layer===CollisionLayer.White?"#fff":"#000",ctx2.fillRect(this.x,this.y,this.width+pixel,this.height+pixel)}}class Collectable extends RectangularEntity{static VISUAL_SIZE=.5;solid=!1;draw(ctx2){ctx2.save(),ctx2.lineWidth=.1,ctx2.strokeStyle=this.layer===CollisionLayer.White?"#000":"#fff",ctx2.fillStyle=this.layer===CollisionLayer.White?"#fff":"#000",ctx2.translate(this.x,this.y),ctx2.scale(this.width,this.height),ctx2.translate(1/2,1/2),ctx2.beginPath(),ctx2.arc(0,0,Collectable.VISUAL_SIZE/2,0,Math.PI*2),ctx2.stroke(),ctx2.fill(),ctx2.restore()}}class Food extends Collectable{static VISUAL_SIZE=.8;solid=!1;#time=0;step(time){this.#time=time}draw(ctx2){ctx2.save(),ctx2.lineWidth=.1,ctx2.strokeStyle=this.layer===CollisionLayer.White?"#000":"#fff",ctx2.fillStyle=this.layer===CollisionLayer.White?"#fff":"#000",ctx2.translate(this.x,this.y),ctx2.scale(this.width,this.height),ctx2.translate(1/2,1/2),ctx2.rotate(Math.sin(this.#time/1e3+this.x/10+this.y/10)*Math.PI/12),ctx2.beginPath(),ctx2.moveTo(0,-Food.VISUAL_SIZE/2);for(let i=0;i<4;i++)ctx2.rotate(Math.PI/2),ctx2.quadraticCurveTo(0,0,0,-Food.VISUAL_SIZE/2);ctx2.stroke(),ctx2.fill(),ctx2.restore()}}class Block extends RectangularEntity{}class CellularAutomata extends RectangularEntity{#drawLife(ctx2,fill,stroke){ctx2.save(),ctx2.translate(this.x+this.width/2,this.y+this.height/2),ctx2.scale(this.width,this.height),ctx2.fillStyle=this.layer===CollisionLayer.White?"#fff":"#000",ctx2.strokeStyle=this.layer===CollisionLayer.White?"#000":"#fff",ctx2.lineWidth=.1,ctx2.lineJoin="round",ctx2.lineCap="round",ctx2.beginPath();const t=performance.now()/1e3+this.x*.3+this.y*.3,n=8;for(let i=0;i<n;i++){const isCorner=i%2===0,out=Math.sin(t)*(isCorner?.1:.02)+.6,along=Math.cos(t)*.05+.2,lobeThickness=Math.sin(t+Math.PI*i/n)*.1+.5;ctx2.rotate(Math.PI*2/n),ctx2.moveTo(0,0),ctx2.bezierCurveTo(out,0,out+lobeThickness,along,out,along),ctx2.bezierCurveTo(out,along,out,along+lobeThickness,0,along)}ctx2.closePath(),fill&&ctx2.fill(),stroke&&ctx2.stroke(),ctx2.restore()}draw(ctx2){this.#drawLife(ctx2,!1,!0)}draw2(ctx2){this.#drawLife(ctx2,!0,!1)}}class Crate extends RectangularEntity{draw(ctx2){const pixel=1/ctx2.getTransform().a;ctx2.save(),ctx2.lineWidth=.2,ctx2.strokeStyle=this.layer===CollisionLayer.White?"#fff":"#000",ctx2.fillStyle=this.layer===CollisionLayer.White?"#fff":"#000",ctx2.beginPath();const inset=.1;ctx2.rect(this.x+inset,this.y+inset,this.width-inset*2+pixel,this.height-inset*2+pixel),ctx2.fill(),ctx2.stroke(),ctx2.lineWidth=.05,ctx2.strokeStyle=this.layer===CollisionLayer.White?"#000":"#fff",ctx2.stroke(),ctx2.clip(),ctx2.beginPath(),ctx2.moveTo(this.x,this.y),ctx2.lineTo(this.x+this.width,this.y+this.height),ctx2.lineWidth=.2,ctx2.strokeStyle=this.layer===CollisionLayer.White?"#000":"#fff",ctx2.stroke(),ctx2.lineWidth=.1,ctx2.strokeStyle=this.layer===CollisionLayer.White?"#fff":"#000",ctx2.stroke(),ctx2.beginPath(),ctx2.moveTo(this.x+this.width,this.y),ctx2.lineTo(this.x,this.y+this.height),ctx2.lineWidth=.2,ctx2.strokeStyle=this.layer===CollisionLayer.White?"#000":"#fff",ctx2.stroke(),ctx2.lineWidth=.1,ctx2.strokeStyle=this.layer===CollisionLayer.White?"#fff":"#000",ctx2.stroke(),ctx2.restore()}}const yinYangTexture=document.createElement("img"),yinYangTextureLoaded=new Promise(resolve=>yinYangTexture.onload=resolve);yinYangTexture.src="graphics/yin-yang.svg";yinYangTexture.width=128;yinYangTexture.height=128;await yinYangTextureLoaded;let yinYangPattern=null;class Inverter extends Collectable{static VISUAL_SIZE=.8;solid=!1;#time=0;step(time){this.#time=time}draw(ctx2){if(ctx2.save(),ctx2.translate(this.x,this.y),ctx2.scale(this.width,this.height),ctx2.translate(1/2,1/2),ctx2.rotate(-(this.#time/1e3+this.x/10+this.y/10)*Math.PI/12),!yinYangPattern){yinYangPattern=ctx2.createPattern(yinYangTexture,"repeat");const yinYangTextureCanvas=document.createElement("canvas");yinYangTextureCanvas.width=yinYangTexture.width,yinYangTextureCanvas.height=yinYangTexture.height,yinYangTextureCanvas.getContext("2d").drawImage(yinYangTexture,0,0,yinYangTexture.width,yinYangTexture.height),yinYangPattern=ctx2.createPattern(yinYangTextureCanvas,"repeat")}yinYangPattern&&(yinYangPattern.setTransform(new DOMMatrix().translate(-1/2,-1/2).scale(1/yinYangTexture.width,1/yinYangTexture.height)),ctx2.fillStyle=yinYangPattern,ctx2.fillRect(-this.width/2,-this.height/2,this.width,this.height)),ctx2.restore()}}let hoverEffect,levelBorder;function setHighlight(tile,options={}){hoverEffect&&(hoverEffect.remove(),hoverEffect=void 0),tile&&(activePlayer||activityMode==="edit")&&(hoverEffect=document.createElement("div"),hoverEffect.classList.add("hover-effect"),document.body.appendChild(hoverEffect),hoverEffect?.classList.toggle("active-effect",options.pressed??!1),hoverEffect?.classList.toggle("valid",options.valid??!0),hoverEffect?.classList.toggle("selection",options.isSelection??!1),positionElement(hoverEffect,tileOnPage(tile)))}function setLevelBorder(levelInfo2){levelBorder||(levelBorder=document.createElement("div"),levelBorder.classList.add("level-border"),document.body.appendChild(levelBorder)),positionElement(levelBorder,tileOnPage({x:0,y:0,width:levelInfo2.width,height:levelInfo2.height}))}function positionElement(element,rect){element.style.left=`${rect.x}px`,element.style.top=`${rect.y}px`,element.style.width=`${rect.width}px`,element.style.height=`${rect.height}px`}function highlightMove(tile,options={}){const valid=tile&&activePlayer?analyzeMoveAbsolute(activePlayer,tile).valid:!1;setHighlight(tile,{valid,...options})}const canvas=document.createElement("canvas");canvas.style.touchAction="none";const ctx=canvas.getContext("2d");document.body.appendChild(canvas);const editorGUI=document.getElementById("entities-bar"),replayBar=document.getElementById("replay-bar"),gameOptionsBar=document.getElementById("game-options-bar");let transform;function draw(){const styleWidth=window.innerWidth,gameOptionsBarRect=gameOptionsBar.getBoundingClientRect();editorGUI.style.paddingTop=`${gameOptionsBarRect.bottom+5}px`,replayBar.style.paddingTop=`${gameOptionsBarRect.bottom+5}px`;const editorGUIRect=editorGUI.getBoundingClientRect(),replayBarRect=replayBar.getBoundingClientRect(),top=Math.max(editorGUIRect.bottom,replayBarRect.bottom,gameOptionsBarRect.bottom)+5,styleHeight=window.innerHeight-top-5;canvas.style.transform=`translateY(${top}px)`,canvas.style.width=`${styleWidth}px`,canvas.style.height=`${styleHeight}px`;const resolutionWidth=Math.floor(styleWidth*devicePixelRatio),resolutionHeight=Math.floor(styleHeight*devicePixelRatio),resized=canvas.width!==resolutionWidth||canvas.height!==resolutionHeight;resized&&(canvas.width=resolutionWidth,canvas.height=resolutionHeight),ctx.fillStyle="#000",ctx.fillRect(0,0,canvas.width,canvas.height),ctx.save(),ctx.translate(canvas.width/2,canvas.height/2);const borderSize=.2,viewWidth=levelInfo.width+borderSize*2,viewHeight=levelInfo.height+borderSize*2,viewCenterX=levelInfo.width/2,viewCenterY=levelInfo.height/2,scale=Math.min(canvas.width/viewWidth,canvas.height/viewHeight);ctx.scale(scale,scale),ctx.translate(-viewCenterX,-viewCenterY),transform=ctx.getTransform(),resized&&postResize(),drawEntities(ctx,entities),drawProblems(ctx),setLevelBorder(levelInfo),ctx.restore();for(const overlayElement of document.querySelectorAll(".level-specific-overlay, #level-stuck-hint"))positionElement(overlayElement,tileOnPage({x:0,y:0,width:levelInfo.width,height:levelInfo.height}))}function drawEntities(ctx2,entities2){for(const entity of entities2)entity.draw?.(ctx2);for(const entity of entities2)entity.draw2?.(ctx2);for(const entity of entities2)entity.draw3?.(ctx2)}const problems=[];function addProblem(tile,type){problems.push({tile,type})}function clearProblems(){problems.length=0}function drawProblems(ctx2){ctx2.save(),ctx2.globalAlpha=.5,ctx2.fillStyle="#f00",ctx2.font="1px sans-serif",ctx2.textAlign="center",ctx2.textBaseline="middle";for(const{tile,type}of problems){const icon=type==="overlap"?"🗗":"🛇",scale=Math.sin(performance.now()/200)*.2+1;ctx2.save(),ctx2.translate(tile.x+tile.width/2,tile.y+tile.height/2),ctx2.scale(scale,scale),ctx2.fillText(icon,0,0),ctx2.restore()}ctx2.restore()}function viewToWorld(clientPoint){const rect=canvas.getBoundingClientRect(),x=clientPoint.clientX-rect.left,y=clientPoint.clientY-rect.top;if(!transform)return{x:0,y:0};const point=new DOMPoint(x*devicePixelRatio,y*devicePixelRatio).matrixTransform(transform.inverse());return{x:point.x,y:point.y}}function worldToView(worldPoint){const rect=canvas.getBoundingClientRect(),point=new DOMPoint(worldPoint.x,worldPoint.y).matrixTransform(transform);return{x:point.x/devicePixelRatio+rect.left,y:point.y/devicePixelRatio+rect.top}}function pageToWorldTile(clientPoint){const worldPoint=viewToWorld(clientPoint);return{x:Math.floor(worldPoint.x),y:Math.floor(worldPoint.y),width:1,height:1}}function tileOnPage(tile){const point=worldToView(tile),point2=worldToView({x:tile.x+tile.width,y:tile.y+tile.height});return{x:point.x,y:point.y,width:point2.x-point.x,height:point2.y-point.y}}let tool="Brush",brushEntityClass=Block,brushColor=CollisionLayer.White,draggingEntities=[],dragGestureLastTile,draggingSegmentIndex=0,defining,createdUndoState=!1,selectionRange,selectedEntities=[],selectTheSelectTool=()=>{};function getSelectionBox(){if(selectionRange)return{x:Math.min(selectionRange.startTile.x,selectionRange.endTile.x),y:Math.min(selectionRange.startTile.y,selectionRange.endTile.y),width:Math.abs(selectionRange.startTile.x-selectionRange.endTile.x)+1,height:Math.abs(selectionRange.startTile.y-selectionRange.endTile.y)+1}}function initLevelEditorGUI(){const entitiesBar=document.getElementById("entities-bar"),entityButtons=entitiesBar.querySelectorAll(".entity-button"),toolButtons=entitiesBar.querySelectorAll(".tool-button");function setSelectedButton(button){selectionRange=void 0,setHighlight(void 0);for(const button2 of toolButtons)button2.classList.remove("selected");button.classList.add("selected")}const eraserButton=document.querySelector(".tool-button[data-tool='Eraser'"),moveButton=document.querySelector(".tool-button[data-tool='Move'"),selectButton=document.querySelector(".tool-button[data-tool='Select'"),clearButton=document.querySelector("#clear-button"),invertButton=document.querySelector("#invert-button"),levelInfoButton=document.querySelector("#level-info-button"),levelInfoEditor=document.querySelector("#level-info-editor"),levelInfoEditorOKButton=document.querySelector("#level-info-editor-ok-button"),levelInfoEditorCancelButton=document.querySelector("#level-info-editor-cancel-button"),saveButton=document.querySelector("#save-button"),openButton=document.querySelector("#open-button");saveButton.addEventListener("click",saveLevel),openButton.addEventListener("click",openLevel),eraserButton.addEventListener("click",()=>{tool="Eraser",setSelectedButton(eraserButton)}),moveButton.addEventListener("click",()=>{tool="Move",setSelectedButton(moveButton)}),selectButton.addEventListener("click",()=>{tool="Select",setSelectedButton(selectButton)}),clearButton.addEventListener("click",()=>{selectedEntities.length||selectionRange?deleteSelectedEntities():clearLevel(!0,!1)}),invertButton.addEventListener("click",invert),levelInfoButton.addEventListener("click",()=>{levelInfoEditor.showModal();const widthInput=levelInfoEditor.querySelector("#level-width"),heightInput=levelInfoEditor.querySelector("#level-height");widthInput.value=levelInfo.width.toString(),heightInput.value=levelInfo.height.toString(),widthInput.select()}),levelInfoEditor.addEventListener("close",()=>{console.log(levelInfoEditor.returnValue)}),levelInfoEditor.addEventListener("keydown",event=>{event.key==="Escape"&&levelInfoEditor.close(),event.stopPropagation()}),levelInfoEditorOKButton.addEventListener("click",event=>{event.preventDefault(),undoable();const width=parseInt(levelInfoEditor.querySelector("#level-width").value),height=parseInt(levelInfoEditor.querySelector("#level-height").value);if(isNaN(width)||isNaN(height)){alert("Invalid input. Please enter a number.");return}(width!==levelInfo.width||height!==levelInfo.height)&&(levelInfo.width=width,levelInfo.height=height,playSound("resize")),postUpdate(),levelInfoEditor.close()}),levelInfoEditorCancelButton.addEventListener("click",event=>{event.preventDefault(),levelInfoEditor.close()}),selectTheSelectTool=()=>{tool="Select",setSelectedButton(selectButton)};for(const button of entityButtons)makeEntityButton(button);tool==="Move"?setSelectedButton(moveButton):tool==="Eraser"?setSelectedButton(eraserButton):tool==="Select"&&setSelectedButton(selectButton);function makeEntityButton(button){const entityName=button.getAttribute("data-entity"),entityColor=button.getAttribute("data-color"),layer=entityColor==="White"?CollisionLayer.White:entityColor==="Black"?CollisionLayer.Black:entityColor==="Both"?CollisionLayer.Both:CollisionLayer.None;function makeColoredEntity(){const entityInstance=makeEntity(entityName);if(entityInstance instanceof Snake)for(const segment of entityInstance.segments)segment.layer=layer;else entityInstance instanceof RectangularEntity&&(entityInstance.layer=layer);return entityInstance}button.addEventListener("click",()=>{brushEntityClass=makeEntity(entityName).constructor,brushColor=layer,tool="Brush",setSelectedButton(button)}),button.classList.toggle("selected",entityName===brushEntityClass.name&&layer===brushColor&&tool==="Brush");const canvas2=document.createElement("canvas"),ctx2=canvas2.getContext("2d");button.prepend(canvas2);const styleWidth=48,styleHeight=48;function renderIcon(){canvas2.style.width=`${styleWidth}px`,canvas2.style.height=`${styleHeight}px`,canvas2.width=styleWidth*devicePixelRatio,canvas2.height=styleHeight*devicePixelRatio;const entityForButton=makeColoredEntity();ctx2.scale(devicePixelRatio,devicePixelRatio),ctx2.translate(8,8),ctx2.scale(32,32),drawEntities(ctx2,[entityForButton])}renderIcon(),addEventListener("resize",renderIcon)}}function handleInputForLevelEditing(eventTarget){const{on,removeEventListeners}=makeEventListenerGroup();function updateHighlight(){const pressed=pointerDownTile&&sameTile(mouseHoveredTile,pointerDownTile);let valid=!1;mouseHoveredTile&&(tool==="Move"?valid=hitTestAllEntities(mouseHoveredTile.x,mouseHoveredTile.y).length>0:withinLevel(mouseHoveredTile)&&(valid=!0)),tool==="Select"?setHighlight(getSelectionBox(),{isSelection:!0,valid:!0}):setHighlight(mouseHoveredTile,{pressed,valid}),validateLevel()}onUpdate(updateHighlight),onResize(updateHighlight);function validateLevel(){clearProblems();const entitiesByPosition=new Map;for(const entity of entities){const key=entity instanceof RectangularEntity?`${entity.x},${entity.y}`:"?,?",bucket=entitiesByPosition.get(key)??[];if(bucket.push(entity),entitiesByPosition.set(key,bucket),entity instanceof RectangularEntity)withinLevel(entity)||addProblem(entity,"out-of-bounds");else if(entity instanceof Snake)for(const segment of entity.segments){withinLevel(segment)||addProblem(segment,"out-of-bounds");for(const otherSegment of entity.segments)segment!==otherSegment&&sameTile(segment,otherSegment)&&addProblem(segment,"overlap");const hits=hitTestAllEntities(segment.x,segment.y).filter(hit=>hit.entity!==entity&&entities.indexOf(hit.entity)<entities.indexOf(entity));topLayer(hits)===segment.layer&&addProblem(segment,"collision")}}for(const bucket of entitiesByPosition.values()){const collectablesHere=bucket.filter(entity=>entity instanceof Collectable);collectablesHere.length>1&&addProblem(collectablesHere[1],"overlap")}}let pointerDownTile,mouseHoveredTile;on(eventTarget,"pointerdown",event=>{pointerDownTile=pageToWorldTile(event);const selectionBox=getSelectionBox(),shouldDragSelection=selectionBox&&pointerDownTile&&within(pointerDownTile,selectionBox);if(!withinLevel(pointerDownTile)&&tool!=="Select"&&(pointerDownTile=void 0),mouseHoveredTile=pointerDownTile,pointerDownTile&&!draggingEntities.length&&event.button===0&&(tool==="Move"||shouldDragSelection)){if(shouldDragSelection)draggingEntities=[...selectedEntities],draggingSegmentIndex=0,dragGestureLastTile=pointerDownTile;else{const hit=hitTestAllEntities(pointerDownTile.x,pointerDownTile.y)[0];draggingEntities=[hit?.entity].filter(Boolean),draggingSegmentIndex=hit?.segmentIndex??0,dragGestureLastTile=void 0}if(draggingEntities.length){undoable();for(const entity of draggingEntities)entities.splice(entities.indexOf(entity),1);entities.push(...draggingEntities),sortEntities()}updateHighlight()}else pointerDownTile&&event.button===0&&tool==="Select"?(selectionRange={startTile:{...pointerDownTile},endTile:{...pointerDownTile},defining:!0},selectEntitiesInSelectionBox(),updateHighlight()):mouseHoveredTile&&handlePointerDownOrMove(event,mouseHoveredTile,mouseHoveredTile)}),on(window,"pointerup",endDrag),on(window,"pointercancel",endDrag);function endDrag(event){pointerDownTile=void 0,defining=void 0,draggingEntities=[],draggingSegmentIndex=0,dragGestureLastTile=void 0,createdUndoState=!1,selectionRange?.defining&&(selectionRange.defining=!1),mouseHoveredTile=pageToWorldTile(event),withinLevel(mouseHoveredTile)||(mouseHoveredTile=void 0),updateHighlight()}on(window,"pointermove",event=>{const lastTile=mouseHoveredTile;if(mouseHoveredTile=pageToWorldTile(event),!pointerDownTile&&!withinLevel(mouseHoveredTile)&&(mouseHoveredTile=void 0),mouseHoveredTile)if(draggingEntities.length||dragGestureLastTile)if(selectionRange&&dragGestureLastTile)translateSelection(mouseHoveredTile.x-dragGestureLastTile.x,mouseHoveredTile.y-dragGestureLastTile.y),dragGestureLastTile=mouseHoveredTile;else for(const entity of draggingEntities)drag(entity,mouseHoveredTile);else selectionRange?.defining&&pointerDownTile?(selectionRange.endTile={...mouseHoveredTile},selectEntitiesInSelectionBox()):handlePointerDownOrMove(event,lastTile,mouseHoveredTile);sameTile(lastTile,mouseHoveredTile)||updateHighlight()});function handlePointerDownOrMove(event,from,to){if(!(!from||!to||!pointerDownTile)){if(event.buttons===2||tool==="Eraser"&&event.buttons===1)for(const point of bresenham(from,to))erase({x:point.x,y:point.y,width:1,height:1});else if(event.buttons===1&&tool==="Brush"){brushEntityClass===Snake&&defining instanceof Snake&&(from=defining.segments[0]);const lineFn=brushEntityClass===Snake?lineNoDiagonals:bresenham;for(const point of lineFn(from,to)){let tile={x:point.x,y:point.y,width:1,height:1};if(brushEntityClass===Snake&&(tile=clampToLevel(tile)),!brush(tile))break}}}}function brush(mouseHoveredTile2){const hits=hitTestAllEntities(mouseHoveredTile2.x,mouseHoveredTile2.y);if(withinLevel(mouseHoveredTile2)&&topLayer(hits)!==brushColor&&!hits.some(hit=>hit.entity instanceof Collectable)||defining instanceof Snake&&!sameTile(mouseHoveredTile2,defining.segments[0])){createdUndoState||(undoable(),createdUndoState=!0);const entityInstance=defining??new brushEntityClass;if(defining||entityInstance instanceof Snake&&(entityInstance.segments.length=0,defining=entityInstance),entityInstance instanceof Snake){if(hits.filter(hit=>hit.entity instanceof Snake).map(hit=>hit.entity).includes(entityInstance))return entityInstance.segments.length>1&&sameTile(entityInstance.segments[1],mouseHoveredTile2)&&entityInstance.segments.shift(),!1;entityInstance.segments.unshift({layer:brushColor,x:mouseHoveredTile2.x,y:mouseHoveredTile2.y,width:1,height:1})}else entityInstance instanceof RectangularEntity&&(entityInstance.layer=brushColor,entityInstance.x=mouseHoveredTile2.x,entityInstance.y=mouseHoveredTile2.y);entities.includes(entityInstance)||entities.push(entityInstance),sortEntities(),postUpdate()}return!0}function erase(mouseHoveredTile2){const hits=hitTestAllEntities(mouseHoveredTile2.x,mouseHoveredTile2.y);for(const hit of hits)entities.indexOf(hit.entity)>=0&&(createdUndoState||(undoable(),createdUndoState=!0),hit.entity instanceof Snake?deleteSnakeSegment(hit.entity,hit.segmentIndex):deleteEntity(hit.entity))}function drag(dragging,to){if(to=clampToLevel(to),dragging instanceof RectangularEntity)dragging.x=to.x,dragging.y=to.y;else if(dragging instanceof Snake){const draggingSegment=dragging.segments[draggingSegmentIndex];if(draggingSegment.x!==to.x||draggingSegment.y!==to.y){const from={x:draggingSegment.x,y:draggingSegment.y};for(const point of[...lineNoDiagonals(from,to)].slice(1)){for(let i=dragging.segments.length-1;i>draggingSegmentIndex;i--)lead2(dragging.segments[i-1],dragging.segments[i]);for(let i=0;i<draggingSegmentIndex;i++)lead2(dragging.segments[i+1],dragging.segments[i]);draggingSegment.x=point.x,draggingSegment.y=point.y,Snake.DEBUG_SNAKE_DRAGGING&&draw()}}}}function lead2(leader,follower){follower.x=leader.x,follower.y=leader.y,follower.width=leader.width,follower.height=leader.height,Snake.DEBUG_SNAKE_DRAGGING&&draw()}function selectEntitiesInSelectionBox(){const selectionBox=getSelectionBox();selectionBox&&(selectedEntities=entities.filter(entity=>entity instanceof RectangularEntity?within(entity,selectionBox):entity instanceof Snake?entity.segments.some(segment=>within(segment,selectionBox)):!1),postUpdate())}return removeEventListeners}function deleteSelectedEntities(){if(selectedEntities.length){undoable();for(const entity of selectedEntities){const index=entities.indexOf(entity);index>=0&&entities.splice(index,1)}}selectedEntities.length=0,selectionRange=void 0,setHighlight(void 0),postUpdate()}function selectAll(){selectTheSelectTool(),selectedEntities=[...entities],selectionRange={startTile:{x:0,y:0,width:1,height:1},endTile:{x:levelInfo.width-1,y:levelInfo.height-1,width:1,height:1},defining:!1},setHighlight(getSelectionBox(),{isSelection:!0,valid:!0}),postUpdate()}function invert(){undoable();const targetEntities=selectedEntities.length||selectionRange?selectedEntities:entities,targetRegion=getSelectionBox()??{x:0,y:0,width:levelInfo.width,height:levelInfo.height};for(const entity of targetEntities)if(entity instanceof RectangularEntity)entity.layer=invertCollisionLayer(entity.layer);else if(entity instanceof Snake)for(const segment of entity.segments)segment.layer=invertCollisionLayer(segment.layer);for(let x=targetRegion.x;x<targetRegion.x+targetRegion.width;x++)for(let y=targetRegion.y;y<targetRegion.y+targetRegion.height;y++)if(!hitTestAllEntities(x,y).some(hit=>hit.entity instanceof Block)){const block=new Block;block.layer=CollisionLayer.White,block.x=x,block.y=y,entities.unshift(block),selectionRange&&selectedEntities.push(block)}postUpdate()}async function clipboardCopy(){const selectionBox=getSelectionBox();if(!selectionBox)return;const before=serialize(),selectedEntityIndicesBefore=selectedEntities.map(entity=>entities.indexOf(entity)),selectionRangeBefore=JSON.parse(JSON.stringify(selectionRange));let copied;try{levelInfo.width=selectionBox.width,levelInfo.height=selectionBox.height,translateSelection(-selectionBox.x,-selectionBox.y),entities.splice(0,entities.length,...selectedEntities),copied=serialize()}finally{deserialize(before,null,!0),selectedEntities=selectedEntityIndicesBefore.map(index=>entities[index]),selectionRange=selectionRangeBefore,postUpdate()}try{await navigator.clipboard.writeText(copied)}catch(error){alert(`Error copying: ${String(error)}`)}}async function clipboardCut(){await clipboardCopy(),deleteSelectedEntities()}async function clipboardPaste(){let text;try{text=await navigator.clipboard.readText()}catch(error){alert(`Error pasting: ${String(error)}`);return}const before=serialize();try{deserialize(text);for(const entity of entities)"id"in entity&&(entity.id=crypto.randomUUID());selectionRange={startTile:{x:0,y:0,width:1,height:1},endTile:{x:levelInfo.width-1,y:levelInfo.height-1,width:1,height:1},defining:!1},selectedEntities=[...entities]}catch(error){alert(`Error pasting: ${String(error)}`)}finally{deserialize(before)}undoable(),entities.splice(0,0,...selectedEntities),sortEntities(),postUpdate()}function translateSelection(dx,dy){if(selectionRange){for(const entity of selectedEntities)translateEntity(entity,dx,dy);selectionRange.startTile.x+=dx,selectionRange.startTile.y+=dy,selectionRange.endTile.x+=dx,selectionRange.endTile.y+=dy,setHighlight(getSelectionBox(),{isSelection:!0,valid:!0})}}function deleteEntity(entity){const index=entities.indexOf(entity);if(index===-1)throw new Error("Could not find entity to delete in entities array");entities.splice(index,1),entity===activePlayer&&setActivePlayer(void 0)}function deleteSnakeSegment(snake,segmentIndex){if(snake.segments.length>=2){const index=entities.indexOf(snake);if(index===-1)throw new Error("Could not find snake in entities array");const before=snake.segments.slice(0,segmentIndex),after=snake.segments.slice(segmentIndex+1);if(snake.segments.length=before.length,after.length>0){const newSnake=new Snake;newSnake.segments.length=0,newSnake.segments.push(...after),entities.push(newSnake),snake.segments.length===0&&(entities.splice(index,1),snake===activePlayer&&setActivePlayer(newSnake)),sortEntities()}}else deleteEntity(snake)}class Snake extends Entity{segments=[];fusedSnakeIds=new Set;id=crypto.randomUUID();growOnNextMove=!1;_highlightTime=-1/0;_melodyIndex=0;_movementPreview={x:0,y:0};_headRelativeOffset={x:0,y:0};_headAngularOffset=0;_tailTravelOffset=0;_tailAnimStartPos=null;_tailAnimFactor=0;_xEyes=!1;static HIGHLIGHT_DURATION=500;static DEBUG_SNAKE_DRAGGING=!1;constructor(){super();for(let i=0;i<10;i++)this.segments.push({x:i,y:0,width:1,height:1,layer:CollisionLayer.White})}toJSON(){const fusedSnakeIds=Array.from(this.fusedSnakeIds).filter(id=>id!==this.id&&entities.some(e=>e instanceof Snake&&e.id===id));return{id:this.id,segments:this.segments,growOnNextMove:this.growOnNextMove,fusedSnakeIds:fusedSnakeIds.length?fusedSnakeIds:void 0}}fromJSON(data){const{id,segments,growOnNextMove,fusedSnakeIds}=data;this.id=id,this.segments=segments,this.growOnNextMove=growOnNextMove,this.fusedSnakeIds=new Set(fusedSnakeIds??[])}highlight(){this._highlightTime=performance.now()}previewMovement(deltaX,deltaY){this._movementPreview.x=deltaX,this._movementPreview.y=deltaY;const movementPreviewAngle=Math.atan2(this._movementPreview.y,this._movementPreview.x),movementPreviewDistance=Math.hypot(this._movementPreview.y,this._movementPreview.x),headAngle=this.segments.length>1?Math.atan2(this.segments[1].y-this.segments[0].y,this.segments[1].x-this.segments[0].x):Math.PI/2;this._headRelativeOffset={x:Math.cos(movementPreviewAngle-headAngle)*movementPreviewDistance,y:Math.sin(movementPreviewAngle-headAngle)*movementPreviewDistance},this._headAngularOffset=this._headRelativeOffset.y*-1,this._tailTravelOffset=this._tailAnimFactor*movementPreviewDistance}draw(ctx2){this._bodyPath(ctx2),ctx2.fillStyle=this.segments[0].layer===CollisionLayer.White?"#fff":"#000",ctx2.fill()}draw2(ctx2){const selectedInLevelEditor=selectedEntities.includes(this);this._drawHeadDetails(ctx2),this._drawBodyOutline(ctx2,()=>{ctx2.strokeStyle=this.segments[0].layer===CollisionLayer.White?"#fff":"#000",ctx2.lineWidth=Math.min(.6,Math.max(.1,2/ctx2.getTransform().a))*2,ctx2.stroke()}),this._drawBodyOutline(ctx2,()=>{selectedInLevelEditor&&ctx2.setLineDash([.1,.2]),ctx2.strokeStyle=this.segments[0].layer===CollisionLayer.White?"#000":"#fff",ctx2.lineWidth=Math.min(.6,Math.max(.1,2/ctx2.getTransform().a)),ctx2.stroke()})}draw3(ctx2){const msSinceHighlight=performance.now()-this._highlightTime,highlight=Math.min(1,Math.max(0,1-msSinceHighlight/Snake.HIGHLIGHT_DURATION));if(highlight>0&&this._drawBodyOutline(ctx2,()=>{ctx2.strokeStyle=`hsla(40, 100%, 50%, ${highlight})`,ctx2.lineWidth=Math.min(1,Math.max(.2,10/ctx2.getTransform().a)),ctx2.stroke()}),Snake.DEBUG_SNAKE_DRAGGING){ctx2.font="bold 0.5px sans-serif",ctx2.textAlign="center",ctx2.textBaseline="alphabetic";for(let i=0;i<this.segments.length;i++){const segment=this.segments[i];ctx2.fillStyle=`hsl(${i*360/this.segments.length}, 100%, 50%)`;const angleDiff=Math.PI/2;ctx2.fillText(i.toString(),segment.x+segment.width/2+Math.sin(i*angleDiff+Math.PI/4)*.3,segment.y+segment.height*.7+Math.cos(i*angleDiff+Math.PI/4)*.3)}}}_drawBodyOutline(ctx2,draw2){ctx2.save(),ctx2.save(),this._bodyPath(ctx2),ctx2.resetTransform(),ctx2.rect(0,0,ctx2.canvas.width,ctx2.canvas.height),ctx2.restore(),ctx2.clip("evenodd"),this._bodyPath(ctx2),draw2(),ctx2.restore()}_drawHeadDetails(ctx2){const head=this.segments[0];ctx2.save(),ctx2.translate(head.x+head.width/2,head.y+head.height/2),ctx2.scale(head.width,head.height);const angle=this.segments[1]?Math.atan2(this.segments[1].y-head.y,this.segments[1].x-head.x):Math.PI/2;ctx2.rotate(angle+this._headAngularOffset);const movementPreviewFactor=this.segments[1]?1:2;ctx2.translate(this._headRelativeOffset.x*movementPreviewFactor,this._headRelativeOffset.y*movementPreviewFactor),ctx2.beginPath();const eyeRadius=1/8,eyeDistance=.45;this._xEyes?(ctx2.lineWidth=1/12,ctx2.moveTo(-.125,-.125+eyeDistance/2),ctx2.lineTo(eyeRadius,eyeRadius+eyeDistance/2),ctx2.moveTo(-.125,eyeRadius+eyeDistance/2),ctx2.lineTo(eyeRadius,-.125+eyeDistance/2),ctx2.moveTo(-.125,-.125-eyeDistance/2),ctx2.lineTo(eyeRadius,eyeRadius-eyeDistance/2),ctx2.moveTo(-.125,eyeRadius-eyeDistance/2),ctx2.lineTo(eyeRadius,-.125-eyeDistance/2),ctx2.strokeStyle=head.layer===CollisionLayer.White?"#000":"#fff",ctx2.stroke(),ctx2.beginPath()):this.growOnNextMove?(ctx2.lineWidth=1/12,ctx2.arc(-.125/3,eyeDistance/2,eyeRadius,Math.PI/3,-Math.PI/3,!0),ctx2.strokeStyle=head.layer===CollisionLayer.White?"#000":"#fff",ctx2.stroke(),ctx2.beginPath(),ctx2.arc(-.125/3,-.45/2,eyeRadius,Math.PI/3,-Math.PI/3,!0),ctx2.strokeStyle=head.layer===CollisionLayer.White?"#000":"#fff",ctx2.stroke(),ctx2.beginPath()):(ctx2.arc(0,eyeDistance/2,eyeRadius,0,Math.PI*2,!0),ctx2.arc(0,-.45/2,eyeRadius,0,Math.PI*2,!0),ctx2.fillStyle=head.layer===CollisionLayer.White?"#000":"#fff",ctx2.fill());const msSinceHighlight=performance.now()-this._highlightTime,highlight=Math.min(1,Math.max(0,1-msSinceHighlight/Snake.HIGHLIGHT_DURATION));highlight>0&&(ctx2.beginPath(),ctx2.translate(-1/2,0),ctx2.scale(Math.pow(Math.sin(highlight),.2),1),ctx2.rotate(Math.sin(performance.now()/50)*Math.PI/8),ctx2.moveTo(0,0),ctx2.translate(-.5,0),ctx2.lineTo(0,0),ctx2.rotate(Math.sin(performance.now()/50-1.5)*Math.PI/8),ctx2.lineTo(-.4,-.2),ctx2.lineTo(0,0),ctx2.lineTo(-.4,.2),ctx2.strokeStyle="#fff",ctx2.globalCompositeOperation="exclusion",ctx2.lineWidth=1/12,ctx2.stroke()),ctx2.restore()}_bodyPath(ctx2){ctx2.beginPath();const backtrack2=[];function mirrored(draw2){draw2(),backtrack2.push({matrix:ctx2.getTransform(),draw(){ctx2.scale(1,-1),draw2()}})}for(let i=0;i<this.segments.length;i++){const segment=this.segments[i];ctx2.save(),ctx2.translate(segment.x+segment.width/2,segment.y+segment.height/2);const backAngle=Math.atan2(this.segments[i+1]?.y-segment.y,this.segments[i+1]?.x-segment.x),foreAngle=Math.atan2(segment.y-this.segments[i-1]?.y,segment.x-this.segments[i-1]?.x);if(i===0)this.segments.length===1?(ctx2.rotate(Math.PI/2),ctx2.arc(this._headRelativeOffset.x,this._headRelativeOffset.y,1/2,0,Math.PI*2)):(ctx2.rotate(backAngle),ctx2.scale(1,.9),ctx2.arc(this._headRelativeOffset.x,this._headRelativeOffset.y,1/2,Math.PI/2,-Math.PI/2));else if(i===this.segments.length-1){if(ctx2.rotate(foreAngle),ctx2.scale(1,.9),mirrored(()=>ctx2.lineTo(-1/2,-1/2)),this._tailAnimStartPos){const tailPos={x:this._tailAnimStartPos.x+(segment.x-this._tailAnimStartPos.x)*(1-this._tailTravelOffset),y:this._tailAnimStartPos.y+(segment.y-this._tailAnimStartPos.y)*(1-this._tailTravelOffset)},hipBonePos={x:segment.x+(this.segments[i-1].x-segment.x)*(1-this._tailTravelOffset),y:segment.y+(this.segments[i-1].y-segment.y)*(1-this._tailTravelOffset)};ctx2.restore(),ctx2.save(),ctx2.translate(tailPos.x+segment.width/2,tailPos.y+segment.height/2);const foreAngle2=Math.atan2(tailPos.y-hipBonePos.y,tailPos.x-hipBonePos.x);ctx2.rotate(foreAngle2),ctx2.scale(1,.9)}ctx2.lineTo(-1/2,-1/2);const extent=.5,pointiness=0;ctx2.quadraticCurveTo(extent*(1-pointiness),-1/2,extent,0),ctx2.quadraticCurveTo(extent*(1-pointiness),1/2,-1/2,1/2)}else ctx2.rotate(foreAngle),ctx2.scale(1,.9),mirrored(()=>ctx2.lineTo(-1/2,-1/2)),mirrored(()=>ctx2.lineTo(1/2,-1/2));ctx2.restore()}const transform2=ctx2.getTransform();for(let i=backtrack2.length-1;i>=0;i--)ctx2.setTransform(backtrack2[i].matrix),backtrack2[i].draw();ctx2.closePath(),ctx2.setTransform(transform2)}at(x,y,includeHead=!0,includeTail=!0){for(let i=includeHead?0:1;i<this.segments.length-(includeTail?0:1);i++){const segment=this.segments[i];if(x===segment.x&&y===segment.y)return{entity:this,layer:segment.layer,segmentIndex:i}}return null}animateMove(move,originalTailPosition){const startTime=performance.now(),duration=60,animate2=()=>{const elapsed=performance.now()-startTime;if(elapsed>duration){this._tailAnimFactor=0,this.previewMovement(0,0);return}const pos=(1+Math.min(1,elapsed/duration))/2-1;this._tailAnimFactor=1,this._tailAnimStartPos=originalTailPosition,this.previewMovement(move.delta.x*pos,move.delta.y*pos),requestAnimationFrame(animate2)};animate2()}animateInvalidMove(move){const startTime=performance.now(),duration=move.encumbered?230:120,animate2=()=>{const elapsed=performance.now()-startTime;if(elapsed>duration){this._tailAnimFactor=0,this._xEyes=!1,this.previewMovement(0,0);return}const progress=Math.min(1,elapsed/duration),pos=Math.sin(progress*Math.PI)*.08;this._xEyes=move.encumbered,this._tailAnimFactor=!move.encumbered&&this.segments.length>1&&(move.to.x!==this.segments[1].x||move.to.y!==this.segments[1].y)?-.3:0,this.segments.length>1?this._tailAnimStartPos={x:this.segments[this.segments.length-1].x+(this.segments[this.segments.length-1].x-this.segments[this.segments.length-2].x),y:this.segments[this.segments.length-1].y+(this.segments[this.segments.length-1].y-this.segments[this.segments.length-2].y),width:this.segments[this.segments.length-1].width,height:this.segments[this.segments.length-1].height}:this._tailAnimStartPos=null,this.previewMovement(move.delta.x*pos,move.delta.y*pos),requestAnimationFrame(animate2)};animate2()}getNextMelodyIndex(){return this._melodyIndex++}}function sameTile(a,b){return a===b?!0:!a||!b?!1:a.x===b.x&&a.y===b.y&&a.width===b.width&&a.height===b.height}function neighborOf(tile,direction){return{x:tile.x+direction.x*tile.width,y:tile.y+direction.y*tile.height,width:tile.width,height:tile.height}}function withinLevel(tile){return tile.x>=0&&tile.y>=0&&tile.x+tile.width<=levelInfo.width&&tile.y+tile.height<=levelInfo.height}function within(tile,container){return tile.x>=container.x&&tile.y>=container.y&&tile.x+tile.width<=container.x+container.width&&tile.y+tile.height<=container.y+container.height}function clampToLevel(tile){return{x:Math.max(0,Math.min(levelInfo.width-tile.width,tile.x)),y:Math.max(0,Math.min(levelInfo.height-tile.height,tile.y)),width:tile.width,height:tile.height}}function*bresenham(start,end){const xDist=Math.abs(end.x-start.x),yDist=-Math.abs(end.y-start.y),xStep=start.x<end.x?1:-1,yStep=start.y<end.y?1:-1;let x=start.x,y=start.y,error=xDist+yDist;for(;yield{x,y},!(x===end.x&&y===end.y);){const e2=2*error;e2>=yDist&&(error+=yDist,x+=xStep),e2<=xDist&&(error+=xDist,y+=yStep)}}function*lineNoDiagonals(start,end){const xDist=Math.abs(end.x-start.x),yDist=-Math.abs(end.y-start.y),xStep=start.x<end.x?1:-1,yStep=start.y<end.y?1:-1;let x=start.x,y=start.y,error=xDist+yDist;for(;yield{x,y},!(x===end.x&&y===end.y);)2*error-yDist>xDist-2*error?(error+=yDist,x+=xStep):(error+=xDist,y+=yStep)}function makeEntity(entityType){switch(entityType){case"Block":return new Block;case"Snake":return new Snake;case"Food":return new Food;case"Inverter":return new Inverter;case"Crate":return new Crate;case"CellularAutomata":return new CellularAutomata;default:throw new Error(`Unknown entity type: ${entityType}`)}}function sortEntities(){entities.sort((a,b)=>+(a instanceof Collectable)-+(b instanceof Collectable))}function hitTestAllEntities(x,y,options={}){const hits=[];for(let i=entities.length-1;i>=0;i--){const entity=entities[i];if(entity instanceof Snake){const hit=entity.at(x,y,!0,entity!==options.ignoreTailOfSnake);hit&&hits.push(hit)}else if(entity.at){const hit=entity.at(x,y);hit&&hits.push(hit)}}return hits}function topLayer(hits){for(const hit of hits)if(hit.entity.solid)return hit.layer;return CollisionLayer.Black}function layersCollide(a,b){return(a&b)!==0}function invertCollisionLayer(layer){return layer===CollisionLayer.White?CollisionLayer.Black:layer===CollisionLayer.Black?CollisionLayer.White:layer}function makeEventListenerGroup(){const listenerCleanupFunctions=[];function on(eventTarget,type,listener,options){eventTarget.addEventListener(type,listener,options),listenerCleanupFunctions.push(()=>eventTarget.removeEventListener(type,listener,options))}function removeEventListeners(){for(const cleanup2 of listenerCleanupFunctions)cleanup2()}return{on,removeEventListeners}}function translateEntity(dragging,dx,dy){if(dragging instanceof RectangularEntity)dragging.x+=dx,dragging.y+=dy;else if(dragging instanceof Snake)for(const segment of dragging.segments)segment.x+=dx,segment.y+=dy}const hintsByLevelName={Bridge:["Black snakes can go on white, and white snakes can go on black.","Grow the black snake first by collecting the black star.","Make a straight line across for the white snake to cross","Make the bridge in the middle, where it's narrower."],Ferry:["Consider divisibility.","The black snake is 6-long, and so it can fit on two 3-long snakes.","While both 3-long snakes are under the 6-long snake, they can't move, but the 2-long snake can.","Arrange the snakes in a row so that the shortest snake can move from the left to the right while the black snake is in the middle."],"Yin and Yang: Give and Take":["Make a bridge for each color.","The first bridge must make room for the snake to exit.","One way to make the bridges is a 2x2 square."],"Fill The Box":["Avoid creating 1-wide gaps. If there are two dead ends, it's impossible to fill both.","The initial moves of each snake can make it easier.","Construct a Hamiltonian path on a grid graph."],"North Star":["Free the white snake heads so they can form a bridge.","Free the middle white snake head last to let the black snake head get to all of them."],Corkscrew:["Grow the white snake and then cover the black food.","Let the black snake eat all but one of the covered stars.","The remaining star should be on the side, not the middle, so it can be eaten while crossing to the top."],"The Three Pagodas":["The black snake (black chicken in the myth) can turn around when growing from one to two segments","The long white snake can provide a pathway with an exit for the black snake","Get the white food last"],"Lock Picking":["Slide the pins (horizontal white snakes) into the compartment on the right.","The black snake must be facing the right way when bridging the pins","If you do the middle pin first, the top or bottom one can't fit.","The last pin doesn't need to fit in the compartment on the right."],"Yin and Yang: Challenge":["While symmetrical, there is an imbalance.","The black snake has plenty of room to get out of the way if you grow it first.","Bridge the black food, then grow the black snake, then move the black snake around the rim to get it off of the white snake. Finally, bridge the white food and collect all of it.","Avoid creating 1-wide gaps (dead ends) in which food needs to be collected. If you create multiple of these it can become impossible.","You can simplify collecting the white food by removing white boundaries with the black snake, making the area box like or easier to navigate."],"Security by Obscurity":["Don't be fooled by similarity to the prior level...","Think outside the box!"],"Greedy Eyes":["The snakes are greedy, but don't let them eat without setting up for the other snake to move.","Try to free the snake from the upper left fairly early on.","If a snake is too long to get around, maybe have it eat later.","Explore! Don't be afraid to backtrack."],"The Finish Line":["Try to get snakes outside the checker pattern.","Explore! Don't be afraid to backtrack."]},realLevelNames=[...document.querySelectorAll("#level-select .level-button")].map(el=>el.textContent.trim());for(const levelName in hintsByLevelName)realLevelNames.includes(levelName)||console.warn(`Level name "${levelName}" not found on level select screen.`);let currentLevelButton,standaloneLevelMode=!0;const cache=new Map;async function fetchCached(url){return cache.has(url)||cache.set(url,fetch(url)),(await cache.get(url)).clone()}function initLevelSelect(){const levelButtons=document.querySelectorAll(".level-button");for(const button of levelButtons){const wrapper=document.createElement("div");wrapper.className="level-button-wrapper",button.replaceWith(wrapper),wrapper.append(button);const levelURL=button.getAttribute("data-level");button.addEventListener("click",()=>{showLevelSplash({title:button.querySelector(".button-text")?.textContent??"Loading..."}),loadLevelFile(levelURL,()=>{currentLevelButton=button,standaloneLevelMode=!1,updatePageTitleAndLevelSpecificOverlaysAndHints()})});const buttonTextSpan=document.createElement("span");buttonTextSpan.className="button-text",buttonTextSpan.textContent=button.textContent.trim(),button.textContent="",button.append(buttonTextSpan);const levelPreview=document.createElement("div");levelPreview.className="level-preview";const levelPreviewError=document.createElement("div");levelPreviewError.className="level-preview-error",levelPreviewError.hidden=!0;const canvas2=document.createElement("canvas"),ctx2=canvas2.getContext("2d");button.prepend(levelPreview),levelPreview.append(canvas2,levelPreviewError);const styleWidth=200,styleHeight=200;(async()=>{if(location.search.includes("no-level-previews"))return;canvas2.style.width=`${styleWidth}px`,canvas2.style.height=`${styleHeight}px`;const resolutionWidth=Math.floor(styleWidth*devicePixelRatio),resolutionHeight=Math.floor(styleHeight*devicePixelRatio);(canvas2.width!==resolutionWidth||canvas2.height!==resolutionHeight)&&(canvas2.width=resolutionWidth,canvas2.height=resolutionHeight),ctx2.fillStyle="#000",ctx2.fillRect(0,0,canvas2.width,canvas2.height);const request=await fetchCached(levelURL);if(!request.ok){levelPreviewError.textContent=`Failed to load level preview.
Status: ${request.statusText}`,levelPreviewError.hidden=!1;return}const stateToPreview=await(await request.blob()).text(),oldState=serialize();try{deserialize(stateToPreview,levelURL,!0),ctx2.save(),ctx2.translate(canvas2.width/2,canvas2.height/2);const borderSize=.2,viewWidth=levelInfo.width+borderSize*2,viewHeight=levelInfo.height+borderSize*2,viewCenterX=levelInfo.width/2,viewCenterY=levelInfo.height/2,scale=Math.min(canvas2.width/viewWidth,canvas2.height/viewHeight);ctx2.scale(scale,scale),ctx2.translate(-viewCenterX,-viewCenterY),drawEntities(ctx2,entities),ctx2.restore()}catch(error){levelPreviewError.textContent=`Failed to load level preview.
${String(error)}`,levelPreviewError.hidden=!1}finally{deserialize(oldState)}})()}}function updateLevelSelect(){for(const button of document.querySelectorAll(".level-button")){const levelId=button.getAttribute("data-level"),moveCount=Number(safeStorage.getItem(storageKeys.bestMoveCount(levelId))??1/0),solution=safeStorage.getItem(storageKeys.bestSolution(levelId)),completed=moveCount<1/0;button.dataset.moveCount=String(moveCount),button.dataset.completed=String(completed);let replayButton=button.parentElement.querySelector(".replay-button");if(solution&&!replayButton){replayButton=document.createElement("button"),replayButton.className="bw-button replay-button",button.parentElement.append(replayButton),replayButton.addEventListener("click",()=>{loadLevelFromText(solution,"replay")});const img=document.createElement("img");img.src="graphics/view-replay-3.svg",img.alt="View Replay",img.width=32,img.height=32,replayButton.append(img)}}}async function loadLevelFile(levelURL,loadedCallback){const request=await fetchCached(levelURL);if(!request.ok){alert(`Failed to load level ${JSON.stringify(levelURL)}: ${request.statusText}`);return}const blob=await request.blob();loadLevel(blob,"play",loadedCallback,levelURL)}function loadFirstLevel(){document.querySelector(".level-button").click()}function loadNextLevel(){if(!currentLevelButton){undo(),restartLevel(),showLevelSplash({title:"Level Complete",duration:800});return}const levelButtons=[...document.querySelectorAll(".level-button")],index=levelButtons.indexOf(currentLevelButton),levelButton=levelButtons[index+1];levelButton&&(currentLevelButton.closest("#test-cases-not-real-levels")||!levelButton.closest("#test-cases-not-real-levels"))?levelButton.click():(document.querySelector("#game-win-screen").classList.add("active"),playSound("gongBrilliant"))}function setStandaloneLevelMode(value=!0){standaloneLevelMode=value,value?(currentLevelButton=void 0,document.body.dataset.standaloneLevel=""):delete document.body.dataset.standaloneLevel}function setCurrentLevel(id){if(!id){setStandaloneLevelMode();return}currentLevelButton=document.querySelector(`button[data-level="${id}"]`)??void 0,standaloneLevelMode=!1}function currentLevelID(){return currentLevelButton?.getAttribute("data-level")??""}function updatePageTitleAndLevelSpecificOverlaysAndHints(){activityMode==="edit"?document.title="Snakeshift - Level Editor":activityMode==="replay"?document.title="Snakeshift - Replay":currentLevelButton?document.title=`Snakeshift - ${currentLevelButton.querySelector(".button-text")?.textContent}`:activityMode==="play"?document.title="Snakeshift - Custom Level":document.title="Snakeshift";for(const overlayElement of document.querySelectorAll(".level-specific-overlay, #level-stuck-hint"))overlayElement.hidden=overlayElement.dataset.forLevel!==currentLevelID();const hintButton2=document.querySelector("#hint-button"),hintsList=document.querySelector("#hints-list"),nextHintButton2=document.querySelector("#hints-dialog-next-hint-button"),hintsDialog2=document.querySelector("#hints-dialog");if(hintsList.innerHTML="",hintButton2.hidden=!0,currentLevelButton){const levelName=currentLevelButton.querySelector(".button-text")?.textContent??"",levelHints=hintsByLevelName[levelName];if(levelHints){for(const hint of levelHints){const li=document.createElement("li");li.textContent=hint,hintsList.append(li),li.classList.add("hint"),li.hidden=!0}hintButton2.hidden=!1,hintsDialog2.querySelector(".hint[hidden]")?.removeAttribute("hidden"),nextHintButton2.hidden=!hintsDialog2.querySelector(".hint[hidden]")}else hintsList.innerHTML="<li>No hints available for this level.</li>",nextHintButton2.hidden=!0}}const levelMatch=location.hash.match(/^#\/?levels\/(.+)$/);levelMatch&&setTimeout(()=>{const levelButton=document.querySelector(`button[data-level*="${levelMatch[1]}"]`);levelButton&&levelButton.click()},100);location.search.includes("show-test-levels")&&(document.querySelector("#test-cases-not-real-levels").hidden=!1);const playButton=document.querySelector("#play-button"),levelSelectButton=document.querySelector("#level-select-button"),levelEditorButton=document.querySelector("#level-editor-button"),creditsButton=document.querySelector("#credits-button"),backButton=document.querySelector("#back-to-main-menu-button"),mainMenu=document.querySelector("#main-menu"),levelSelect=document.querySelector("#level-select"),credits=document.querySelector("#credits"),levelSplash=document.querySelector("#level-splash"),levelSplashTitle=document.querySelector("#level-splash-title");function initMainMenu(){playButton.addEventListener("click",()=>{hideScreens(),loadFirstLevel()}),levelSelectButton.addEventListener("click",()=>{hideScreens(),levelSelect.classList.add("active"),updateLevelSelect(),document.body.dataset.screen="level-select"}),levelEditorButton.addEventListener("click",()=>{hideScreens(),setActivityMode("edit"),clearLevel(!1,!0),document.body.dataset.screen="level-editor"}),creditsButton.addEventListener("click",()=>{hideScreens(),credits.classList.add("active"),document.body.dataset.screen="credits"}),backButton.addEventListener("click",()=>{activityMode==="play"&&standaloneLevelMode?setActivityMode("edit"):showMainMenu()}),showMainMenu()}function hideScreens(options={}){for(const screen of document.querySelectorAll(".screen.active"))options.except?.includes(screen.id)||screen.classList.remove("active");options.except?.includes(levelSplash.id)||hideLevelSplash()}function showMainMenu(){return confirmLoseUnsavedChanges()?(hideScreens(),mainMenu.classList.add("active"),document.body.dataset.screen="main-menu",setActivityMode("menu"),playButton.focus(),!0):!1}const splashScreenTimeouts=new Set;function showLevelSplash(options){hideScreens(),levelSplash.classList.add("active"),levelSplashTitle.textContent=options.title,playSound("gong"),splashScreenTimeouts.add(setTimeout(()=>{levelSplash.style.transition="opacity .5s",levelSplash.style.opacity="0",splashScreenTimeouts.add(setTimeout(()=>{hideLevelSplash()},location.search.includes("fast-splash-screens")?0:600))},location.search.includes("fast-splash-screens")?100:options.duration??2e3))}function hideLevelSplash(){for(const timeout of splashScreenTimeouts)clearTimeout(timeout);splashScreenTimeouts.clear(),levelSplash.classList.remove("active"),levelSplash.style.transition="",levelSplash.style.opacity="",levelSplashTitle.textContent=""}function handleInput(eventTarget){const{on,removeEventListeners}=makeEventListenerGroup();function updateHighlight(){controlScheme===ControlScheme.KeyboardFacingRelative||controlScheme===ControlScheme.KeyboardAbsoluteDirection&&highlightMove(void 0)}onUpdate(updateHighlight),onResize(updateHighlight);let dragging=!1,lastPointerPosition;if(activityMode!=="menu"){let pointerDownSnake,movedSincePointerDown=!1;const snakeUnderPointer=event=>{const mouseTile=pageToWorldTile(event),snakeHit=hitTestAllEntities(mouseTile.x,mouseTile.y).find(hit=>hit.entity instanceof Snake);if(snakeHit)return snakeHit?.entity;const maxDistance=40;let closestSnake,closestDistance=maxDistance;for(const entity of entities)if(entity instanceof Snake)for(const segment of entity.segments){const segmentOnPage=tileOnPage(segment),center={x:segmentOnPage.x+segmentOnPage.width/2,y:segmentOnPage.y+segmentOnPage.height/2},distance=Math.hypot(center.x-event.clientX,center.y-event.clientY);distance<closestDistance&&(closestSnake=entity,closestDistance=distance)}return closestSnake};on(eventTarget,"pointerdown",event=>{dragging=!0,lastPointerPosition={x:event.clientX,y:event.clientY},setControlScheme(ControlScheme.Pointer),pointerDownSnake=snakeUnderPointer(event),movedSincePointerDown=!1}),on(window,"pointerup",event=>{dragging=!1,lastPointerPosition=void 0,pointerDownSnake&&snakeUnderPointer(event)===pointerDownSnake&&!movedSincePointerDown&&shouldInputBeAllowed()&&(setActivePlayer(pointerDownSnake),playSound("switchSnakes"),pointerDownSnake.highlight()),resetMovementPreview()}),on(window,"pointercancel",()=>{dragging=!1,lastPointerPosition=void 0,resetMovementPreview()}),on(window,"pointermove",event=>{if(!dragging||!activePlayer||!lastPointerPosition||!shouldInputBeAllowed())return;event.preventDefault();const deltaX=event.clientX-lastPointerPosition.x,deltaY=event.clientY-lastPointerPosition.y,moveThreshold=parseInt(safeStorage.getItem(storageKeys.pointerMoveThreshold)??"40");if(activePlayer.previewMovement(deltaX/moveThreshold/10,deltaY/moveThreshold/10),Math.abs(deltaX)<moveThreshold&&Math.abs(deltaY)<moveThreshold)return;let moveX=0,moveY=0;if(Math.abs(deltaX)>Math.abs(deltaY)?moveX=Math.sign(deltaX):moveY=Math.sign(deltaY),moveX!==0||moveY!==0){const move2=analyzeMoveRelative(activePlayer,moveX,moveY);move2.valid?(takeMove(move2),postUpdate(),movedSincePointerDown=!0,vibrate(!0)):(activePlayer.animateInvalidMove(move2),vibrate(!1)),moveX!==0&&(lastPointerPosition.x=event.clientX),moveY!==0&&(lastPointerPosition.y=event.clientY)}})}function resetMovementPreview(){for(const entity of entities)entity instanceof Snake&&entity.previewMovement(0,0)}function move(dx,dy,controlScheme2=ControlScheme.KeyboardAbsoluteDirection,gamepad){if(!activePlayer){const currentFocus=document.activeElement??document.body,currentRect=currentFocus.getBoundingClientRect(),currentCenter={x:currentRect.x+currentRect.width/2,y:currentRect.y+currentRect.height/2},normalizedInput={x:dx/Math.hypot(dx,dy),y:dy/Math.hypot(dx,dy)},directionalScore=element=>{const rect=element.getBoundingClientRect(),center={x:rect.x+rect.width/2,y:rect.y+rect.height/2},distanceX=center.x-currentCenter.x,distanceY=center.y-currentCenter.y,vector={x:distanceX/Math.hypot(distanceX,distanceY),y:distanceY/Math.hypot(distanceX,distanceY)};return normalizedInput.x*vector.x+normalizedInput.y*vector.y},distanceScore=element=>{const rect=element.getBoundingClientRect(),center={x:rect.x+rect.width/2,y:rect.y+rect.height/2},distanceX=center.x-currentCenter.x,distanceY=center.y-currentCenter.y;return Math.hypot(distanceX,distanceY)},combinedScore=element=>distanceScore(element)/directionalScore(element),isVisibleAndOnTop=element=>{const rect=element.getBoundingClientRect(),center={x:rect.x+rect.width/2,y:rect.y+rect.height/2};return element.contains(document.elementFromPoint(center.x,center.y))},focusableElements=[...document.querySelectorAll("button, a")].filter(element=>element!==currentFocus&&isVisibleAndOnTop(element)&&directionalScore(element)>0);focusableElements.sort((a,b)=>combinedScore(a)-combinedScore(b)),focusableElements.length&&(console.log("focusing",focusableElements[0]),focusableElements[0].focus());return}if(!shouldInputBeAllowed())return;const move2=analyzeMoveRelative(activePlayer,dx,dy);if(!move2.valid){activePlayer.animateInvalidMove(move2),setControlScheme(controlScheme2),vibrate(!1,gamepad);return}takeMove(move2),setControlScheme(controlScheme2)}on(window,"keydown",event=>{if(event.ctrlKey||event.metaKey||event.altKey)return;let handling=!0;switch(event.code){case"ArrowLeft":case"KeyA":case"Numpad4":case"KeyH":move(-1,0);break;case"ArrowRight":case"KeyD":case"Numpad6":case"KeyL":move(1,0);break;case"ArrowUp":case"KeyW":case"Numpad8":case"KeyK":move(0,-1);break;case"ArrowDown":case"KeyS":case"Numpad2":case"Numpad5":case"KeyJ":move(0,1);break;case"Tab":case"ShiftLeft":case"ShiftRight":activityMode==="play"?cyclePlayerControl():handling=!1;break;default:handling=!1;break}handling&&event.preventDefault()});const buttonsLast=new Map,buttonRepeatTimes=new Map;function justPressed(button,gamepad){const last=buttonsLast.get(gamepad.index)?.get(button);return gamepad.buttons[button].pressed&&!last}function justPressedOrRepeated(button,gamepad){const gamepadRepeatRate=parseInt(safeStorage.getItem(storageKeys.gamepadRepeatRate)??"150"),gamepadRepeatDelay=parseInt(safeStorage.getItem(storageKeys.gamepadRepeatDelay)??"300"),now=performance.now();return justPressed(button,gamepad)?(buttonRepeatTimes.has(gamepad.index)||buttonRepeatTimes.set(gamepad.index,new Map),buttonRepeatTimes.get(gamepad.index).set(button,now+gamepadRepeatDelay),!0):gamepad.buttons[button].pressed&&gamepadRepeatRate!==0&&buttonRepeatTimes.has(gamepad.index)&&buttonRepeatTimes.get(gamepad.index).has(button)&&now>=buttonRepeatTimes.get(gamepad.index).get(button)?(buttonRepeatTimes.get(gamepad.index).set(button,now+gamepadRepeatRate),!0):!1}const minDistance=.5;function pollGamepads(){const gamepads=navigator.getGamepads();let hoveredTile;for(const gamepad of gamepads){if(!gamepad)continue;let usingGamepad=!1;if(activePlayer){const[leftStickX,leftStickY]=gamepad.axes.slice(0,2),playerTile=activePlayer.segments[0],dist=Math.hypot(leftStickX,leftStickY),angle=Math.atan2(leftStickY,leftStickX);let directionIndex=Math.round(angle/(Math.PI/2));directionIndex=(directionIndex%DIRECTIONS.length+DIRECTIONS.length)%DIRECTIONS.length;const direction=DIRECTIONS[directionIndex];if(dist>minDistance){usingGamepad=!0,hoveredTile=neighborOf(playerTile,direction);const move2=analyzeMoveRelative(activePlayer,direction.x,direction.y);hoveredTile&&justPressed(0,gamepad)&&shouldInputBeAllowed()?move2.valid?(takeMove(move2),setControlScheme(ControlScheme.Gamepad),hoveredTile=void 0):(activePlayer.animateInvalidMove(move2),setControlScheme(ControlScheme.Gamepad),hoveredTile=void 0,vibrate(!1,gamepad)):setControlScheme(ControlScheme.Gamepad)}}justPressedOrRepeated(12,gamepad)?move(0,-1,ControlScheme.Gamepad,gamepad):justPressedOrRepeated(13,gamepad)?move(0,1,ControlScheme.Gamepad,gamepad):justPressedOrRepeated(14,gamepad)?move(-1,0,ControlScheme.Gamepad,gamepad):justPressedOrRepeated(15,gamepad)&&move(1,0,ControlScheme.Gamepad,gamepad),justPressed(4,gamepad)?cyclePlayerControl():justPressed(5,gamepad)&&cyclePlayerControl(!0),justPressed(0,gamepad)?activePlayer||document.activeElement instanceof HTMLElement&&document.activeElement.click():justPressed(2,gamepad)?undo():justPressed(1,gamepad)?redo():justPressed(3,gamepad)&&restartLevel(),justPressed(8,gamepad)&&showMainMenu(),buttonsLast.set(gamepad.index,new Map(gamepad.buttons.map((button,index)=>[index,button.pressed])));for(const button of gamepad.buttons)button.pressed&&(usingGamepad=!0);usingGamepad&&setControlScheme(ControlScheme.Gamepad)}controlScheme===ControlScheme.Gamepad&&highlightMove(hoveredTile)}const intervalID=setInterval(pollGamepads,1e3/60);return()=>{removeEventListeners(),clearInterval(intervalID)}}function vibrate(valid,gamepad){if(safeStorage.getItem(storageKeys.hapticsEnabled)==="true"){const duration=parseInt(safeStorage.getItem(valid?storageKeys.hapticsValidDuration:storageKeys.hapticsInvalidDuration)??(valid?"6":"60"));gamepad?gamepad?.vibrationActuator?.playEffect("dual-rumble",{duration,weakMagnitude:.5,strongMagnitude:.3}):navigator.vibrate?.(duration)}}const entities=[],defaultLevelInfo={width:16,height:16},levelInfo={width:defaultLevelInfo.width,height:defaultLevelInfo.height};let activePlayer,controlScheme=ControlScheme.KeyboardAbsoluteDirection;document.body.dataset.controlScheme=controlScheme;let levelSessionId=0;function startNewLevelSession(){levelSessionId+=1}let activityMode="menu",wonLevel=!1,levelHasGoal=!1,editorState;const undos=[],redos=[],editorUndos=[],editorRedos=[];function undoable(){undos.push(serialize()),redos.length=0}let recentUndoSound=0,recentRedoSound=0;function undo(){stepHistory(undos,redos,!0)&&(playSound("undo",{playbackRate:1/(1+recentUndoSound/2),cutOffEndFraction:Math.min(.2,recentUndoSound/5),volume:.2}),recentUndoSound+=1,setTimeout(()=>{recentUndoSound-=1},400),document.getElementById("game-win-screen")?.classList.remove("active"))}function redo(){stepHistory(redos,undos)&&(playSound("redo",{playbackRate:1+recentRedoSound/10,volume:.2}),recentRedoSound+=1,setTimeout(()=>{recentRedoSound-=1},400))}function stepHistory(from,to,skipOverWinState=!1){const state=from.pop();if(!state)return!1;const oldState=serialize();if(to.push(oldState),skipOverWinState&&JSON.parse(oldState).levelId!==JSON.parse(state).levelId)return stepHistory(from,to),!0;deserialize(state);const replaySlider2=document.getElementById("replay-slider");return replaySlider2.value=`${undos.length}`,!0}function goToHistoryIndex(index){for(;undos.length>index&&stepHistory(undos,redos););for(;undos.length<index&&stepHistory(redos,undos););}function serialize(forSave=!1){return JSON.stringify({format:"snakeshift",formatVersion:LEVEL_FORMAT_VERSION,levelInfo,entities,entityTypes:entities.map(e=>e.constructor.name),activePlayerEntityIndex:entities.indexOf(activePlayer),levelId:currentLevelID(),levelSessionId:forSave?void 0:levelSessionId},null,2)+`
`}function deserialize(state,levelId=null,temporary=!1){const whichSnakeBefore=activePlayer?.id??"";entities.length=0;const parsed=JSON.parse(state);if(parsed.format!=="snakeshift")throw new Error("Invalid format");if(parsed.formatVersion>LEVEL_FORMAT_VERSION)throw new Error("Format version is too new");if(parsed.formatVersion===1){parsed.formatVersion=2;for(let i=0;i<parsed.entities.length;i++){const entDef=parsed.entities[i];if(parsed.entityTypes[i]==="Snake")for(const segDef of entDef.segments)"width"in segDef||(segDef.width=segDef.height=segDef.size)}}if(parsed.formatVersion===2&&(parsed.formatVersion=3,parsed.levelInfo={width:16,height:16}),parsed.formatVersion===3){parsed.formatVersion=4;for(const entDef of parsed.entities)delete entDef._time}if(parsed.formatVersion===4){parsed.formatVersion=5;for(let i=0;i<parsed.entityTypes.length;i++)parsed.entityTypes[i]==="Collectable"&&(parsed.entityTypes[i]="Food")}if(parsed.formatVersion!==LEVEL_FORMAT_VERSION)throw new Error("Invalid format version");for(let i=0;i<parsed.entities.length;i++){const entityData=parsed.entities[i],entityType=parsed.entityTypes[i],instance=makeEntity(entityType);instance.fromJSON(entityData),entities.push(instance)}if(levelInfo.width=parsed.levelInfo.width,levelInfo.height=parsed.levelInfo.height,activePlayer=entities[parsed.activePlayerEntityIndex],!temporary){const whichSnakeAfter=activePlayer?.id??"";whichSnakeBefore!==whichSnakeAfter&&(activityMode=="play"||activityMode=="replay")&&activePlayer?.highlight(),standaloneLevelMode||setCurrentLevel(levelId||parsed.levelId),updatePageTitleAndLevelSpecificOverlaysAndHints(),postUpdate()}}function clearLevel(shouldBeUndoable,resetSize){shouldBeUndoable&&undoable(),entities.length=0,resetSize&&(levelInfo.width=defaultLevelInfo.width,levelInfo.height=defaultLevelInfo.height),activePlayer=void 0,postUpdate()}function cyclePlayerControl(reverse=!1){const players=entities.filter(e=>e instanceof Snake),nextIndex=(players.indexOf(activePlayer)+(reverse?-1:1)+players.length)%players.length;players[nextIndex]&&shouldInputBeAllowed()&&(undoable(),activePlayer=players[nextIndex],playSound("switchSnakes"),activePlayer.highlight(),postUpdate())}const updateListeners=[],resizeListeners=[];function onUpdate(listener){updateListeners.push(listener)}function onResize(listener){resizeListeners.push(listener)}function postUpdate(){for(const listener of updateListeners)listener()}function postResize(){for(const listener of resizeListeners)listener()}function setControlScheme(scheme){controlScheme=scheme,document.body.dataset.controlScheme=scheme,postUpdate()}function setActivePlayer(snake){activePlayer=snake,postUpdate()}function guessDefaultActivePlayer(){if(!activePlayer){const snakes=entities.filter(e=>e instanceof Snake);setActivePlayer(snakes.find(snake=>canMove(snake))??snakes[0])}}function saveLevel(){const entitiesOutsideBounds=entities.filter(entity=>entity instanceof RectangularEntity&&!withinLevel(entity)),snakeSegmentsOutsideBounds=entities.filter(entity=>entity instanceof Snake).flatMap(snake=>snake.segments.filter(segment=>!withinLevel(segment)));if(entitiesOutsideBounds.length>0||snakeSegmentsOutsideBounds.length>0){const andText=entitiesOutsideBounds.length>0&&snakeSegmentsOutsideBounds.length>0?" and ":"",entitiesText=entitiesOutsideBounds.length===0?"":entitiesOutsideBounds.length===1?"1 entity":`${entitiesOutsideBounds.length} entities`,segmentsText=snakeSegmentsOutsideBounds.length===0?"":snakeSegmentsOutsideBounds.length===1?"1 snake segment":`${snakeSegmentsOutsideBounds.length} snake segments`;if(confirm(`Remove ${entitiesText}${andText}${segmentsText} outside the level bounds?`)){undoable();for(const entity of entitiesOutsideBounds)entities.splice(entities.indexOf(entity),1);for(const segment of snakeSegmentsOutsideBounds){const hits=hitTestAllEntities(segment.x,segment.y);for(const hit of hits)entities.indexOf(hit.entity)>=0&&hit.entity instanceof Snake&&deleteSnakeSegment(hit.entity,hit.segmentIndex)}postUpdate()}}const levelJSON=serialize(!0),blob=new Blob([levelJSON],{type:"application/json"}),url=URL.createObjectURL(blob),a=document.createElement("a");a.href=url,a.download="snakeshift-level.json",a.click()}function serializePlaythrough(){const states=(activityMode==="replay"?[...undos,serialize(),...redos.toReversed()]:[...undos,serialize()]).map(s=>JSON.parse(s)).filter(s=>s.levelSessionId===levelSessionId).map(s=>(delete s.levelSessionId,s)),baseState=states[0],deltas=[];let prevState=baseState;const diffPatcher=create({objectHash:(obj,index)=>"id"in obj?obj.id:"$$index:"+index});for(let i=1;i<states.length;i++){const state=states[i],delta=diffPatcher.diff(prevState,state);deltas.push(delta),prevState=state}return JSON.stringify({format:"snakeshift-playthrough",formatVersion:PLAYTHROUGH_FORMAT_VERSION,baseState,deltas})}function savePlaythrough(){const json=serializePlaythrough(),blob=new Blob([json],{type:"application/json"}),url=URL.createObjectURL(blob),a=document.createElement("a");a.href=url,a.download="snakeshift-level-playthrough.json",a.click()}function loadPlaythrough(json){const playthrough=parsePlaythrough(json);redos.length=0,loadLevelFromText(playthrough[0],"replay");for(const state of playthrough.toReversed())deserialize(state),redos.push(serialize());redo(),undos.length=0;const replaySlider2=document.getElementById("replay-slider");replaySlider2.max=`${playthrough.length}`,replaySlider2.value="0",replaySlider2.focus(),showLevelSplash({title:`Loaded replay with ${playthrough.length} steps`})}function loadLevel(file,newMode,loadedCallback,levelId=null){file.text().then(fileText=>{levelId&&setStandaloneLevelMode(!1),loadLevelFromText(fileText,newMode,levelId)&&loadedCallback?.()},error=>{alert(`Failed to read level file. ${error}`)})}function confirmLoseUnsavedChanges(){if(activityMode==="menu"||activityMode==="replay")return!0;if(activityMode==="edit"){if(undos.length===0&&redos.length===0)return!0}else if(activityMode==="play"&&(currentLevelID()||editorUndos.length===0&&editorRedos.length===0))return!0;return confirm("This will discard any unsaved changes. Are you sure?")}function loadLevelFromText(fileText,newMode,levelId=null){if(!confirmLoseUnsavedChanges())return!1;const before={state:serialize(),undos:[...undos],redos:[...redos],levelSessionId};if(activityMode==="play"&&newMode==="play"&&undoable(),isPlaythrough(fileText)){try{loadPlaythrough(fileText)}catch(error){return console.error(error),alert(`Failed to load playthrough. ${error.toString()}`),!1}return!0}else{try{startNewLevelSession(),deserialize(fileText,levelId),guessDefaultActivePlayer(),storeBaseLevelState()}catch(error){return deserialize(before.state),undos.splice(0,undos.length,...before.undos),redos.splice(0,redos.length,...before.redos),levelSessionId=before.levelSessionId,console.error(error),alert(`Failed to load level. ${error.toString()}`),!1}return setActivityMode(newMode),hideScreens({except:["level-splash"]}),document.body.dataset.screen="game",!0}}function openLevel(){const input=document.createElement("input");input.type="file",input.accept="application/json",input.addEventListener("change",()=>{const file=input.files?.[0];file&&loadLevel(file,"edit")}),input.click()}let cleanup=handleInput(canvas);function setActivityMode(newMode){activityMode!==newMode&&(console.log("Switching from",activityMode,"to",newMode),cleanup(),activityMode=newMode,document.body.classList.toggle("editing",activityMode==="edit"),document.body.classList.toggle("replaying",activityMode==="replay"),activityMode==="edit"?(setStandaloneLevelMode(),cleanup=handleInputForLevelEditing(canvas),editorState&&(undos.splice(0,undos.length,...editorUndos),redos.splice(0,redos.length,...editorRedos),deserialize(editorState))):activityMode==="play"||activityMode==="replay"?(activityMode==="play"&&(cleanup=handleInput(canvas)),editorUndos.splice(0,editorUndos.length,...undos),editorRedos.splice(0,editorRedos.length,...redos),levelHasGoal=entities.some(e=>e instanceof Food),undos.length=0,redos.length=0,guessDefaultActivePlayer(),storeBaseLevelState()):(setStandaloneLevelMode(),cleanup=handleInput(canvas),clearLevel(!1,!1),undos.length=0,redos.length=0,editorUndos.length=0,editorRedos.length=0,editorState=void 0,levelHasGoal=!1),wonLevel=!1,updatePageTitleAndLevelSpecificOverlaysAndHints())}function storeBaseLevelState(){editorState=serialize(),levelHasGoal=entities.some(e=>e instanceof Food),wonLevel=!1}function restartLevel(){if(activityMode==="replay"){goToHistoryIndex(0);return}if(activityMode==="play"){if(currentLevelID()){loadLevelFile(currentLevelID(),()=>{updatePageTitleAndLevelSpecificOverlaysAndHints()});return}editorState&&(undoable(),deserialize(editorState),wonLevel=!1,startNewLevelSession())}}function handleLevelCompletion(){onUpdate(()=>{activityMode==="play"&&(!wonLevel&&checkLevelWon()?(wonLevel=!0,console.log("Level won!",currentLevelID()),storeLevelSolution(),loadNextLevel()):(checkLevelWon()||(wonLevel=!1),document.querySelector("#level-stuck-hint").hidden=!checkLevelStuck()))})}function analyzeMoveAbsolute(snake,tile){const deltaGridX=Math.round(tile.x-snake.segments[0].x),deltaGridY=Math.round(tile.y-snake.segments[0].y);return analyzeMoveRelative(snake,deltaGridX,deltaGridY)}function analyzeMoveRelative(snake,dirX,dirY){const head=snake.segments[0],deltaX=dirX*head.width,deltaY=dirY*head.height,x=head.x+deltaX,y=head.y+deltaY,hitsAhead=hitTestAllEntities(x,y,{ignoreTailOfSnake:snake.growOnNextMove?void 0:snake}),encumbered=snake.segments.flatMap(segment=>hitTestAllEntities(segment.x,segment.y)).some(hit=>hit.entity.solid&&hit.entity!==snake&&entities.indexOf(hit.entity)>entities.indexOf(snake)&&!(hit.entity instanceof Snake&&snake.fusedSnakeIds.has(hit.entity.id))),movingBackwards=snake.segments.length>1&&dirX===Math.sign(snake.segments[1].x-head.x)&&dirY===Math.sign(snake.segments[1].y-head.y),entitiesToPush=[];{const hit=hitsAhead.find(hit2=>hit2.entity.solid);if(hit?.entity instanceof Crate){const newTile={x:hit.entity.x+deltaX,y:hit.entity.y+deltaY,width:hit.entity.width,height:hit.entity.height},hitsAheadCrate=hitTestAllEntities(newTile.x,newTile.y,{ignoreTailOfSnake:snake});if(withinLevel(newTile)&&layersCollide(hit.entity.layer,head.layer)&&!layersCollide(topLayer(hitsAheadCrate),hit.entity.layer)){entitiesToPush.push(hit.entity);const boxedCollectable=hitsAhead.find(hit2=>hit2.entity instanceof Collectable);boxedCollectable&&entitiesToPush.push(boxedCollectable.entity)}}}for(const entity of entitiesToPush){const index=hitsAhead.findIndex(hit=>hit.entity===entity);index!==-1&&hitsAhead.splice(index,1)}return{snake,valid:(dirX===0||dirY===0)&&(Math.abs(dirX)===1||Math.abs(dirY)===1)&&withinLevel({x,y,width:head.width,height:head.height})&&!movingBackwards&&!encumbered&&!layersCollide(topLayer(hitsAhead),head.layer),encumbered,to:{x,y,width:head.width,height:head.height},delta:{x:deltaX,y:deltaY},entitiesThere:hitsAhead.map(hit=>hit.entity),entitiesToPush}}function canMove(snake){return analyzeMoveRelative(snake,1,0).valid||analyzeMoveRelative(snake,0,1).valid||analyzeMoveRelative(snake,-1,0).valid||analyzeMoveRelative(snake,0,-1).valid}function takeMove(move){const snake=move.snake,originalTailPosition={...snake.segments[snake.segments.length-1]};undoable(),playSound("move"),snake.growOnNextMove&&(growSnake(snake),snake.growOnNextMove=!1);const head=snake.segments[0];for(let i=snake.segments.length-1;i>0;i--){const segment=snake.segments[i],prev=snake.segments[i-1];segment.x=prev.x,segment.y=prev.y}head.x=move.to.x,head.y=move.to.y,head.width=move.to.width,head.height=move.to.height;const ontoIndices=move.entitiesThere.filter(e=>e.solid).map(e=>entities.indexOf(e)),maxIndex=Math.max(...ontoIndices),thisIndex=entities.indexOf(snake);thisIndex<maxIndex&&(entities.splice(maxIndex+1,0,snake),entities.splice(thisIndex,1)),move.entitiesToPush.length>0&&playSound("pushCrate",{playbackRate:Math.random()*.1+.95,volume:.3});for(const entity of move.entitiesToPush)translateEntity(entity,move.delta.x,move.delta.y),entities.splice(entities.indexOf(entity),1),entities.push(entity);move.entitiesToPush.length>0&&sortEntities();for(const entity of move.entitiesThere)entity instanceof Collectable&&layersCollide(entity.layer,head.layer)&&!move.entitiesToPush.includes(entity)&&(entities.splice(entities.indexOf(entity),1),entity instanceof Food?(snake.growOnNextMove=!0,checkLevelWon()||playMelodicSound("eat",snake.getNextMelodyIndex())):entity instanceof Inverter&&invertSnake(snake));for(const fusedSnakeId of snake.fusedSnakeIds){const fusedSnake=entities.find(entity=>entity instanceof Snake&&entity.id===fusedSnakeId);fusedSnake&&dragSnake(fusedSnake,fusedSnake.segments.length-1,snake.segments[snake.segments.length-1])}updateCellularAutomata(),snake.animateMove(move,originalTailPosition)}function dragSnake(dragging,draggingSegmentIndex2,to){const draggingSegment=dragging.segments[draggingSegmentIndex2];if(draggingSegment.x!==to.x||draggingSegment.y!==to.y){const from={x:draggingSegment.x,y:draggingSegment.y};for(const point of[...lineNoDiagonals(from,to)].slice(1)){for(let i=dragging.segments.length-1;i>draggingSegmentIndex2;i--)lead(dragging.segments[i-1],dragging.segments[i]);for(let i=0;i<draggingSegmentIndex2;i++)lead(dragging.segments[i+1],dragging.segments[i]);draggingSegment.x=point.x,draggingSegment.y=point.y}}}function lead(leader,follower){follower.x=leader.x,follower.y=leader.y,follower.width=leader.width,follower.height=leader.height}function growSnake(snake){const newTail={...snake.segments[snake.segments.length-1]};snake.segments.push(newTail)}function invertSnake(snake){const handledEntities=new Set,handledPositions=new Set;function handleEntity(entity){if(!handledEntities.has(entity)){if(handledEntities.add(entity),entity instanceof RectangularEntity)entity.layer=invertCollisionLayer(entity.layer);else if(entity instanceof Snake)for(const segment of entity.segments)handlePosition(segment.x,segment.y),segment.layer=invertCollisionLayer(segment.layer)}}function handlePosition(x,y){if(handledPositions.has(`${x},${y}`))return;handledPositions.add(`${x},${y}`);const hits=hitTestAllEntities(x,y);for(const hit of hits)handleEntity(hit.entity)}handleEntity(snake);for(const pos of handledPositions){const[x,y]=pos.split(",").map(Number);if(!hitTestAllEntities(x,y).some(hit=>hit.entity instanceof Block)){const block=new Block;block.layer=CollisionLayer.White,block.x=x,block.y=y,entities.unshift(block)}}}function updateCellularAutomata(){const occupiedTiles=new Map;for(const entity of entities)if(entity instanceof CellularAutomata){const key=`${entity.x},${entity.y}`;occupiedTiles.set(key,entity)}const newOccupiedTiles=new Set;for(let y=0;y<levelInfo.height;y++)for(let x=0;x<levelInfo.width;x++){const key=`${x},${y}`;([`${x},${y-1}`,`${x+1},${y}`,`${x},${y+1}`,`${x-1},${y}`].filter(n=>occupiedTiles.get(n)?.layer===invertCollisionLayer(topLayer(hitTestAllEntities(x,y).filter(hit=>!(hit.entity instanceof CellularAutomata))))).length>=1||occupiedTiles.has(key))&&(hitTestAllEntities(x,y).some(hit=>!(hit.entity instanceof Block||hit.entity instanceof CellularAutomata))||newOccupiedTiles.add(key))}for(let i=entities.length-1;i>=0;i--){const entity=entities[i];if(entity instanceof CellularAutomata){const key=`${entity.x},${entity.y}`;if(newOccupiedTiles.has(key))continue;hitTestAllEntities(entity.x,entity.y).some(hit=>!(hit.entity instanceof Block||hit.entity instanceof CellularAutomata))||entities.splice(i,1)}}for(const key of newOccupiedTiles){if(occupiedTiles.has(key))continue;const[x,y]=key.split(",").map(Number),cell=new CellularAutomata;cell.x=x,cell.y=y,cell.layer=invertCollisionLayer(topLayer(hitTestAllEntities(x,y))),entities.push(cell)}}function step(time){for(const entity of entities)entity.step?.(time)}function animate(time=0){requestAnimationFrame(animate),step(time),draw()}function checkLevelWon(){return window._winLevelCheat?(window._winLevelCheat=!1,!0):levelHasGoal?entities.filter(e=>e instanceof Food).length===0:(console.log("No goal; level is unwinnable."),!1)}function checkLevelStuck(){return levelHasGoal&&entities.every(entity=>!(entity instanceof Snake)||!canMove(entity))}function storeLevelSolution(){const levelId=currentLevelID();if(!levelId)return;const solution=serializePlaythrough(),moveCount=getMovesFromPlaythrough(solution).filter(m=>typeof m=="string").length,bestMoveCount=Number(safeStorage.getItem(storageKeys.bestMoveCount(levelId))??1/0);isNaN(bestMoveCount)||moveCount<=bestMoveCount?(console.log("New best move count for level",levelId,moveCount,"previous best:",bestMoveCount),safeStorage.setItem(storageKeys.bestMoveCount(levelId),moveCount.toString()),safeStorage.setItem(storageKeys.bestSolution(levelId),solution)):console.log("Not a new best move count for level",levelId,moveCount,"previous best:",bestMoveCount)}function shouldInputBeAllowed(){return!document.querySelector("#game-win-screen.active, #level-splash.active.active")||parseFloat(getComputedStyle(document.querySelector("#game-win-screen.active, #level-splash.active")).opacity)<.7}function moveToSolverMove(move){return{snakeId:move.snake.id,delta:move.delta}}function solverMoveToMove(move){const snake=entities.find(e=>e instanceof Snake&&e.id===move.snakeId);return analyzeMoveRelative(snake,move.delta.x,move.delta.y)}function availableMoves(){const moves=[];for(const entity of entities)if(entity instanceof Snake)for(const direction of DIRECTIONS){const move=analyzeMoveRelative(entity,direction.x,direction.y);move.valid&&moves.push(moveToSolverMove(move))}return moves}function solvePuzzle(depthLimit=50){const visited=new Set,moveHistory=[];async function dfs(depth=0){if(depth>depthLimit)return!1;const state=serialize();if(visited.has(state))return!1;if(visited.add(state),checkLevelWon())return moveHistory;for(const solverMove of availableMoves()){const move=solverMoveToMove(solverMove);if(takeMove(move),moveHistory.push(solverMove),await new Promise(r=>setTimeout(r,0)),await dfs(depth+1))return moveHistory;undo(),moveHistory.pop()}return!1}return dfs()}const _forTesting={tileOnPage,playedSounds,serialize,deserialize,loadLevelFromText,serializePlaythrough,solvePuzzle};window._forTesting=_forTesting;const playEditToggleButton=document.querySelector("#play-edit-toggle-button"),restartLevelButton=document.querySelector("#restart-level-button"),undoButton=document.querySelector("#undo-button"),redoButton=document.querySelector("#redo-button"),fullscreenButton=document.getElementById("fullscreen-button"),replaySlider=document.getElementById("replay-slider"),hintButton=document.querySelector("#hint-button"),hintsDialog=document.querySelector("#hints-dialog"),hintsDialogOKButton=document.querySelector("#hints-dialog-ok-button"),nextHintButton=document.querySelector("#hints-dialog-next-hint-button"),settingsButton=document.querySelector("#settings-button"),settingsDialog=document.querySelector("#settings-dialog"),settingsDialogOKButton=document.querySelector("#settings-dialog-ok-button"),settingsDialogCancelButton=document.querySelector("#settings-dialog-cancel-button"),hapticsEnabledCheckbox=settingsDialog.querySelector("#settings-haptics-enabled"),hapticsValidDurationInput=settingsDialog.querySelector("#settings-haptics-valid-move-ms"),hapticsInvalidDurationInput=settingsDialog.querySelector("#settings-haptics-invalid-move-ms"),gamepadRepeatRateInput=settingsDialog.querySelector("#settings-gamepad-repeat-rate"),gamepadRepeatDelayInput=settingsDialog.querySelector("#settings-gamepad-repeat-delay"),pointerMoveThresholdInput=settingsDialog.querySelector("#settings-pointer-move-threshold");playEditToggleButton.addEventListener("click",()=>{setActivityMode(activityMode==="play"?"edit":"play")});restartLevelButton.addEventListener("click",restartLevel);undoButton.addEventListener("click",undo);redoButton.addEventListener("click",redo);fullscreenButton.addEventListener("click",toggleFullscreen);hintButton.addEventListener("click",()=>{hintsDialog.showModal();const defaultControl=hintsDialog.querySelector("input, textarea");defaultControl?.focus(),defaultControl?.select?.()});hintsDialogOKButton.addEventListener("click",event=>{event.preventDefault(),hintsDialog.close()});nextHintButton.addEventListener("click",event=>{event.preventDefault(),hintsDialog.querySelector(".hint[hidden]")?.removeAttribute("hidden"),nextHintButton.hidden=!hintsDialog.querySelector(".hint[hidden]")});function updateSubSettings(){hapticsValidDurationInput.disabled=!hapticsEnabledCheckbox.checked,hapticsInvalidDurationInput.disabled=!hapticsEnabledCheckbox.checked;for(const element of document.querySelectorAll(".enabled-by-haptics"))element.classList.toggle("disabled",!hapticsEnabledCheckbox.checked)}hapticsEnabledCheckbox.addEventListener("change",updateSubSettings);settingsButton.addEventListener("click",()=>{settingsDialog.showModal(),hapticsEnabledCheckbox.checked=safeStorage.getItem(storageKeys.hapticsEnabled)==="true",hapticsValidDurationInput.value=safeStorage.getItem(storageKeys.hapticsValidDuration)??"6",hapticsInvalidDurationInput.value=safeStorage.getItem(storageKeys.hapticsInvalidDuration)??"60",gamepadRepeatRateInput.value=safeStorage.getItem(storageKeys.gamepadRepeatRate)??"150",gamepadRepeatDelayInput.value=safeStorage.getItem(storageKeys.gamepadRepeatDelay)??"300",pointerMoveThresholdInput.value=safeStorage.getItem(storageKeys.pointerMoveThreshold)??"40";const defaultControl=settingsDialog.querySelector("input, textarea");defaultControl?.focus(),defaultControl?.select?.(),updateSubSettings()});settingsDialog.addEventListener("close",()=>{console.log(settingsDialog.returnValue)});settingsDialog.addEventListener("keydown",event=>{event.key==="Escape"&&settingsDialog.close(),event.stopPropagation()});settingsDialogOKButton.addEventListener("click",event=>{event.preventDefault();const hapticsValidDuration=parseInt(hapticsValidDurationInput.value),hapticsInvalidDuration=parseInt(hapticsInvalidDurationInput.value),gamepadRepeatRate=parseInt(gamepadRepeatRateInput.value),gamepadRepeatDelay=parseInt(gamepadRepeatDelayInput.value),pointerMoveThreshold=parseInt(pointerMoveThresholdInput.value);if(isNaN(hapticsValidDuration)||isNaN(hapticsInvalidDuration)||isNaN(gamepadRepeatRate)||isNaN(gamepadRepeatDelay)||isNaN(pointerMoveThreshold)){alert("Invalid input. Please enter a number.");return}[safeStorage.setItem(storageKeys.hapticsEnabled,hapticsEnabledCheckbox.checked?"true":"false"),safeStorage.setItem(storageKeys.hapticsValidDuration,hapticsValidDuration.toString()),safeStorage.setItem(storageKeys.hapticsInvalidDuration,hapticsInvalidDuration.toString()),safeStorage.setItem(storageKeys.gamepadRepeatRate,gamepadRepeatRate.toString()),safeStorage.setItem(storageKeys.gamepadRepeatDelay,gamepadRepeatDelay.toString()),safeStorage.setItem(storageKeys.pointerMoveThreshold,pointerMoveThreshold.toString())].every(Boolean)||(console.error("Failed to save settings to local storage"),alert("Failed to save settings. Make sure cookies are enabled and try again.")),settingsDialog.close()});settingsDialogCancelButton.addEventListener("click",event=>{event.preventDefault(),settingsDialog.close()});function toggleFullscreen(){document.fullscreenElement?document.exitFullscreen():document.documentElement.requestFullscreen()}replaySlider.addEventListener("input",()=>{const replayIndex=parseInt(replaySlider.value);goToHistoryIndex(replayIndex)});addEventListener("keydown",event=>{if(!shouldInputBeAllowed()&&event.key!=="z"&&event.key!=="Z"&&event.key!=="y"){!event.shiftKey&&!event.ctrlKey&&!event.altKey&&!event.metaKey&&!event.repeat&&(event.key==="Enter"||event.key===" "||event.key==="Escape")&&(document.querySelector("#game-win-screen")?.classList.contains("active")?showMainMenu():hideLevelSplash(),event.preventDefault());return}if(event.key===",")settingsButton.click(),event.preventDefault();else if(event.key==="`"&&!event.repeat)activityMode==="play"?setActivityMode("edit"):activityMode==="edit"&&setActivityMode("play"),event.preventDefault();else if(event.key==="z"||event.key==="Z")event.shiftKey?redo():undo(),event.preventDefault();else if(event.key==="y")redo(),event.preventDefault();else if(event.key==="r")restartLevel(),event.preventDefault();else if(event.key==="p")savePlaythrough(),event.preventDefault();else if(event.key==="s"&&(event.ctrlKey||event.metaKey))saveLevel(),event.preventDefault();else if(event.key==="o"&&(event.ctrlKey||event.metaKey))openLevel(),event.preventDefault();else if(event.key==="n"&&activityMode=="edit")clearLevel(!0,!1),event.preventDefault();else if(event.key==="a"&&activityMode=="edit")selectAll(),event.preventDefault();else if(event.key==="Delete"&&activityMode=="edit")deleteSelectedEntities(),event.preventDefault();else if(event.key==="i"&&activityMode=="edit")invert(),event.preventDefault();else if(event.key==="c"&&activityMode=="edit")clipboardCopy(),event.preventDefault();else if(event.key==="x"&&activityMode=="edit")clipboardCut(),event.preventDefault();else if(event.key==="v"&&activityMode=="edit")clipboardPaste(),event.preventDefault();else if(event.key==="e"&&event.altKey&&activityMode=="edit")document.querySelector("#level-info-button").click(),event.preventDefault();else if((event.key==="ArrowLeft"||event.key==="ArrowRight"||event.key==="ArrowUp"||event.key==="ArrowDown")&&activityMode=="edit"){const dx=event.key==="ArrowRight"?1:event.key==="ArrowLeft"?-1:0,dy=event.key==="ArrowDown"?1:event.key==="ArrowUp"?-1:0;undoable(),translateSelection(dx,dy),event.preventDefault()}else event.key==="Escape"?(document.querySelector("#back-to-main-menu-button").click(),event.preventDefault()):event.key==="m"?(toggleMute(),event.preventDefault()):event.key==="f"&&(toggleFullscreen(),event.preventDefault());enableAudioViaUserGesture()});canvas.addEventListener("pointerdown",event=>{event.preventDefault(),window.getSelection()?.removeAllRanges()});window.addEventListener("pointerdown",event=>{enableAudioViaUserGesture(),event.pointerType==="touch"&&setControlScheme(ControlScheme.Pointer)});canvas.addEventListener("contextmenu",event=>{event.preventDefault()});addEventListener("dragover",event=>{event.preventDefault()});addEventListener("drop",event=>{event.preventDefault();const file=event.dataTransfer?.files[0];file&&loadLevel(file,"edit")});function handleRenamedLevel(oldId,newId){const oldBestMoveCount=safeStorage.getItem(storageKeys.bestMoveCount(oldId)),oldBestSolution=safeStorage.getItem(storageKeys.bestSolution(oldId));oldBestMoveCount&&safeStorage.setItem(storageKeys.bestMoveCount(newId),oldBestMoveCount),oldBestSolution&&safeStorage.setItem(storageKeys.bestSolution(newId),oldBestSolution),safeStorage.removeItem(storageKeys.bestMoveCount(oldId)),safeStorage.removeItem(storageKeys.bestSolution(oldId))}function initLocalStorage(){let storageVersion=Number(safeStorage.getItem(storageKeys.localStorageFormatVersion)??LOCAL_STORAGE_FORMAT_VERSION);storageVersion>LOCAL_STORAGE_FORMAT_VERSION&&console.error("Saved local storage format version is newer than this version of the game. Some data may be lost."),storageVersion===1&&(storageVersion=2,handleRenamedLevel("levels/easy/002-bridge.json","levels/easy/003-bridge.json"),handleRenamedLevel("levels/easy/003-ferry.json","levels/easy/004-ferry.json"),handleRenamedLevel("levels/easy/004-yin-yang-give-and-take.json","levels/easy/005-yin-yang-give-and-take.json"),handleRenamedLevel("levels/easy/005-fill-the-box-further-too-many-solutions.json","levels/easy/006-fill-the-box-further-too-many-solutions.json"),handleRenamedLevel("levels/easy/006-north-star.json","levels/easy/007-north-star.json"),safeStorage.setItem(storageKeys.localStorageFormatVersion,String(storageVersion))),storageVersion!==LOCAL_STORAGE_FORMAT_VERSION?console.error("Invalid local storage format version."):safeStorage.setItem(storageKeys.localStorageFormatVersion,LOCAL_STORAGE_FORMAT_VERSION.toString())}initLocalStorage();handleLevelCompletion();initMainMenu();initLevelEditorGUI();initLevelSelect();Object.assign(resources,await loadResources(resourcePaths));animate();
