html,
body {
  margin: 0;
  padding: 0;
  height: 100%;
  width: 100%;
  overflow: hidden;
}

body {
  background-color: #000;
  color: #fff;
  font-family: sans-serif;
}

.hover-effect {
  position: absolute;
  border: 5px solid yellow;
  border-radius: 5px;
  /* box-shadow: 0 0 10px 5px yellow; */
  box-sizing: border-box;
  pointer-events: none;
  /* cursor: pointer; */
  /* TODO: use outline with outline-offset instead of scale transform */
  transform: scale(1.1);
}

.hover-effect.active-effect {
  transform: scale(1);
}

.hover-effect.selection {
  transform: scale(1);
  /* border: 3px dashed white; */
  border: none;
  /* border-radius: 0; */
  outline: 3px dashed white;
  mix-blend-mode: difference;
}

.hover-effect:not(.valid) {
  border: 5px solid red;
  /* box-shadow: 0 0 10px 5px red; */
  /* cursor: not-allowed; */
}

#tao-te-ching-quote footer {
  margin-top: 2em;
}

/*#tao-te-ching-quote .line-a {
  font-size: 1.3em;
}*/

#tao-te-ching-quote {
  transform: skewX(10deg);
}

#tao-te-ching-quote>* {
  transform: skewX(-10deg);
}

#tao-te-ching-quote .line-b {
  margin-left: 1em;
}

#entities-bar,
#replay-bar {
  position: absolute;
  top: 0;
  z-index: 2;
  width: 100%;
  display: flex;
  justify-content: safe center;
  overflow: auto;
  box-sizing: border-box;
  padding: 5px;
  gap: 5px;
  transition: transform 0.5s, opacity 0.5s;
}

body:not(.editing) #entities-bar {
  transform: translateY(-100%);
  opacity: 0;
}

body:not(.replaying) #replay-bar {
  transform: translateY(-100%);
  opacity: 0;
}

#replay-slider {
  width: 100%;
  height: 40px;
}

input {
  accent-color: #fff;
}

input[type="checkbox"] {
  appearance: none;
  background-color: #000;
  margin: 0;
  font: inherit;
  color: currentColor;
  width: 1.15em;
  height: 1.15em;
  border: 0.15em solid currentColor;
  border-radius: 0.15em;
  transform: translateY(-0.075em);
  display: grid;
  place-content: center;
}

input[type="checkbox"]::before {
  content: "";
  width: 0.65em;
  height: 0.65em;
  transform: scale(0);
  transition: 120ms transform ease-in-out;
  box-shadow: inset 1em 1em 0 currentColor;
  transform-origin: bottom left;
  clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
}

input[type="checkbox"]:checked::before {
  transform: scale(1);
}

input[type="checkbox"]:focus {
  outline: max(2px, 0.15em) solid currentColor;
  outline-offset: max(2px, 0.15em);
}

*::selection {
  background-color: #fff;
  color: #000;
}

input::selection,
.logo-shift::selection {
  background-color: #000;
  color: #fff;
}

.control-row {
  display: flex;
  margin: 5px 0;
  gap: 5px;
  align-items: center;
}

@media (max-width: 450px) {
  dialog {
    margin: 0;
    width: 100vw;
    max-width: 100vw;
  }

  .control-row:not(.checkbox-control-row):not(.buttons-control-row) {
    flex-direction: column;
    align-items: flex-start;
  }
}

@media not (max-width: 450px) {

  #level-info-editor .control-row label {
    width: 130px;
    display: inline-block;
  }

  #level-info-editor .control-row input,
  #level-info-editor .control-row textarea {
    width: 200px;
  }

  #settings-dialog .control-row label {
    width: 235px;
    display: inline-block;
  }

}

#settings-dialog fieldset {
  border: 1px solid #fff;
  border-radius: 5px;
  padding: 15px;
  margin: 15px 0;
}

.fieldset-description {
  font-size: 0.8em;
  max-width: 300px;
}

.disabled {
  color: #aaa;
}

.control-row input[type="number"] {
  width: 50px;
}

.bw-button {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  background-color: #000;
  color: #fff;
  border: 2px solid #fff;
  border-radius: 5px;
  padding: 5px 10px;
  cursor: pointer;
  user-select: none;
}

.bw-button:active {
  /* background-color: #fff;
  color: #000; */
  border-color: transparent;
  box-shadow: 0 0 0 2px #fff inset;
}

.bw-button.selected {
  background-color: #fff;
  color: #000;
}

.bw-button:not(.selected) img {
  filter: invert();
}

.level-border {
  position: absolute;
  pointer-events: none;
  border: 30px solid #fff;
  border-image: url(/graphics/border-2.png) calc(15/32*100%) round;
  border-image-outset: 9px;
  image-rendering: pixelated;
  box-sizing: border-box;
}

#credits a:link,
#credits a:visited {
  color: #fff;
  font-weight: bold;
}

.level-preview {
  position: relative;
}

.level-preview-error:not([hidden]) {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(255, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
}

#main-menu button,
#level-select .level-button {
  min-height: 50px;
  margin: 10px;
  /* clip the pseudo elements used for level completion indication, to avoid a horizontal scrollbar on small screens */
  /* might get rid of this by switching to SVG icons or some-such for level completion indicators */
  overflow: hidden;
}

#level-select {
  /* give room for #game-options-bar */
  padding-top: 50px;
  box-sizing: border-box;
}

#level-list {
  text-align: center;
  max-width: 900px;
}

.level-button-wrapper {
  display: inline-flex;
  position: relative;
}

#level-select .level-button {
  display: inline-flex;
  position: relative;
}

#level-select .level-button canvas {
  max-width: calc(100vw - 26px);
  max-height: calc(100vw - 26px);
}

.replay-button {
  position: absolute;
  right: 0;
  top: 0;
}

#level-select .level-button[data-completed="true"]::after,
#level-select .level-button[data-completed="true"]::before {
  content: "âœ¦";
  pointer-events: none;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  transform: translate(50%, -50%) translate(-2rem, 2rem);
  font-size: 5em;
  color: #fff;
  z-index: 2;
}

#level-select .level-button[data-completed="true"]::before {
  font-size: 6.7em;
  color: #000;
  z-index: 1;
}

#main-menu h1 {
  font-size: min(2em, 15vw);
}

#main-menu h1 .logo-shift {
  color: black;
  background: white;
  border-radius: 20px 30px / 10px 0px;
  padding: 4px;
}

#main-menu button {
  width: 200px;
  max-width: calc(100% - 10px);
}

button:focus,
a:focus {
  outline: 5px solid white;
}

a:focus {
  outline-offset: 5px;
}

dialog {
  border: 30px solid #fff;
  border-image: url(/graphics/border-2.png) calc(15/32*100%) round;
  /* border-image-outset: 9px; */
  image-rendering: pixelated;
  background-color: #000;
  color: #fff;
  padding: min(16px, 1vw);
  box-sizing: border-box;
}

dialog>h2 {
  margin-top: 0;
}

dialog button {
  min-width: 80px;
  min-height: 40px;
}

#game-options-bar {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  padding: 5px;
  box-sizing: border-box;
  z-index: 3;
  display: flex;
  flex-direction: row;
  gap: 5px;
  display: flex;
  width: 100%;
  overflow: auto;
}

#game-options-bar .bw-button {
  padding: 5px 0;
  flex: 1;
  max-width: 100px;
}

body:not([data-standalone-level]) .hide-in-campaign {
  display: none;
}

body[data-screen="level-select"] .level-flow-control-button,
body[data-screen="credits"] .level-flow-control-button {
  display: none;
}

.editing #restart-level-button {
  display: none;
}

:fullscreen #fullscreen-button {
  display: none;
}

@media (max-width: 600px) {
  #game-options-bar .button-text {
    display: none;
  }

  /* #entities-bar .button-text {
    display: none;
  } */
}

#main-menu {
  /* above back button (bit of a hack...) */
  /* TODO: hide back button properly, for (in)accessibility */
  z-index: 4;
}

.screen {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: safe center;
  overflow: auto;
  /* Absolute position makes menus play nice with the editor transition. */
  /* Otherwise, the editor UI jumps to the bottom when returning to the main menu. */
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 2;
  background-color: #000;
  color: #fff;
}

.screen:not(.active) {
  display: none;
}

#level-splash {
  /* Avoid selecting text by clicking and dragging while splash screen is fading out. */
  /* If the element that the selection starts within is hidden while making a selection, it can select lots of unwanted text. */
  pointer-events: none;
}

.level-specific-overlay:not([hidden]),
#level-stuck-hint:not([hidden]) {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1;
  pointer-events: none;
  color: #fff;
  /* text-shadow: calc(0.0em / 50) calc(10.0em / 50) calc(0.02em / 50) #000, calc(9.8em / 50) calc(2.1em / 50) calc(0.02em / 50) #000, calc(4.2em / 50) calc(-9.1em / 50) calc(0.02em / 50) #000, calc(-8.0em / 50) calc(-6.0em / 50) calc(0.02em / 50) #000, calc(-7.6em / 50) calc(6.5em / 50) calc(0.02em / 50) #000, calc(4.8em / 50) calc(8.8em / 50) calc(0.02em / 50) #000, calc(9.6em / 50) calc(-2.8em / 50) calc(0.02em / 50) #000, calc(-0.7em / 50) calc(-10.0em / 50) calc(0.02em / 50) #000, calc(-9.9em / 50) calc(-1.5em / 50) calc(0.02em / 50) #000, calc(-3.5em / 50) calc(9.4em / 50) calc(0.02em / 50) #000, calc(8.4em / 50) calc(5.4em / 50) calc(0.02em / 50) #000, calc(7.1em / 50) calc(-7.0em / 50) calc(0.02em / 50) #000, calc(-5.4em / 50) calc(-8.4em / 50) calc(0.02em / 50) #000, calc(-9.4em / 50) calc(3.5em / 50) calc(0.02em / 50) #000, calc(1.4em / 50) calc(9.9em / 50) calc(0.02em / 50) #000, calc(10.0em / 50) calc(0.8em / 50) calc(0.02em / 50) #000, calc(2.9em / 50) calc(-9.6em / 50) calc(0.02em / 50) #000, calc(-8.7em / 50) calc(-4.8em / 50) calc(0.02em / 50) #000, calc(-6.6em / 50) calc(7.5em / 50) calc(0.02em / 50) #000, calc(5.9em / 50) calc(8.0em / 50) calc(0.02em / 50) #000, calc(9.1em / 50) calc(-4.1em / 50) calc(0.02em / 50) #000, calc(-2.1em / 50) calc(-9.8em / 50) calc(0.02em / 50) #000, calc(-10.0em / 50) calc(-0.1em / 50) calc(0.02em / 50) #000, calc(-2.2em / 50) calc(9.8em / 50) calc(0.02em / 50) #000, calc(9.1em / 50) calc(4.2em / 50) calc(0.02em / 50) #000, calc(6.1em / 50) calc(-8.0em / 50) calc(0.02em / 50) #000, calc(-6.5em / 50) calc(-7.6em / 50) calc(0.02em / 50) #000, calc(-8.8em / 50) calc(4.7em / 50) calc(0.02em / 50) #000, calc(2.7em / 50) calc(9.6em / 50) calc(0.02em / 50) #000, calc(10.0em / 50) calc(-0.6em / 50) calc(0.02em / 50) #000, calc(1.5em / 50) calc(-9.9em / 50) calc(0.02em / 50) #000, calc(-9.3em / 50) calc(-3.6em / 50) calc(0.02em / 50) #000, calc(-5.5em / 50) calc(8.4em / 50) calc(0.02em / 50) #000, calc(7.0em / 50) calc(7.2em / 50) calc(0.02em / 50) #000, calc(8.5em / 50) calc(-5.3em / 50) calc(0.02em / 50) #000, calc(-3.4em / 50) calc(-9.4em / 50) calc(0.02em / 50) #000, calc(-9.9em / 50) calc(1.3em / 50) calc(0.02em / 50) #000, calc(-0.8em / 50) calc(10.0em / 50) calc(0.02em / 50) #000, calc(9.6em / 50) calc(2.9em / 50) calc(0.02em / 50) #000, calc(4.9em / 50) calc(-8.7em / 50) calc(0.02em / 50) #000, calc(-7.5em / 50) calc(-6.7em / 50) calc(0.02em / 50) #000, calc(-8.1em / 50) calc(5.9em / 50) calc(0.02em / 50) #000, calc(4.0em / 50) calc(9.2em / 50) calc(0.02em / 50) #000, calc(9.8em / 50) calc(-2.0em / 50) calc(0.02em / 50) #000, calc(0.2em / 50) calc(-10.0em / 50) calc(0.02em / 50) #000, calc(-9.7em / 50) calc(-2.3em / 50) calc(0.02em / 50) #000, calc(-4.3em / 50) calc(9.0em / 50) calc(0.02em / 50) #000, calc(7.9em / 50) calc(6.1em / 50) calc(0.02em / 50) #000; */
  mix-blend-mode: difference;
  font-size: min(3vh, 3vw);
  display: flex;
  flex-direction: column;
  align-items: center;
  /* justify-content: center; */
}

.level-specific-overlay {
  padding-top: min(6vh, 6vw);
}

.level-specific-overlay big {
  font-size: 2em;
  display: inline-block;
  vertical-align: sub;
}

#level-stuck-hint {
  bottom: 10px;
  top: auto !important;
  height: auto !important;
  animation: fade-in 1s;
  animation-delay: 1s;
  animation-fill-mode: both;
}

@keyframes fade-in {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

kbd:not(.grouping-kbd) {
  display: inline-block;
  padding: 3px 5px;
  font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, monospace;
  font-size: 0.8em;
  line-height: 10px;
  color: #ffffff;
  vertical-align: middle;
  background-color: #000000;
  border: 2px solid #fefbf0;
  border-radius: 6px;
  box-shadow: 2px 2px 0 #ffffff, 1px 1px 0 #ffffff;
  margin-right: 2px;
  text-shadow: none;
}

[data-control-scheme="KeyboardAbsoluteDirection"] .pointer-only,
[data-control-scheme="KeyboardFacingRelative"] .pointer-only,
[data-control-scheme="Gamepad"] .pointer-only {
  display: none;
}

[data-control-scheme="Pointer"] .keyboard-only,
[data-control-scheme="Gamepad"] .keyboard-only {
  display: none;
}

[data-control-scheme="Pointer"] .gamepad-only,
[data-control-scheme="KeyboardAbsoluteDirection"] .gamepad-only,
[data-control-scheme="KeyboardFacingRelative"] .gamepad-only {
  display: none;
}

.gong-effect {
  overflow: hidden;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.gong-effect::before {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  width: max(100vw, 100vh);
  height: max(100vw, 100vh);
  border-radius: 50%;
  border: 10px solid #fff;
  box-sizing: content-box;
  transform: translate(-50%, -50%);
  animation: gong 1s ease forwards;
}

#game-win-screen.active .gong-effect::before {
  animation-duration: 8s;
  animation-delay: -0.5s;
}

@keyframes gong {
  0% {
    transform: translate(-50%, -50%) scale(0.3);
    border-width: 10px;
  }

  100% {
    /* for a square in a circle, side length = âˆš2 Ã— radius */
    /* so if we want the circle to be scaled to the screen rect, with the base diameter as the max of the screen dimensions, we can scale by âˆš2 */
    /* to test this for yourself, make the page a perfect square (device toolbar in chrome devtools helps) and increase border-width in the end state */
    transform: translate(-50%, -50%) scale(sqrt(2));
    border-width: 0;
  }
}

/* Debug visualization */
[data-score]::after {
  content: "Score: " attr(data-score);
  font-size: 1.5em;
}
